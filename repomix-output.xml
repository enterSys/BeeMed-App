This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.docker/
  config.json
.github/
  workflows/
    docker-build-cloud.yml
docs/
  DOCKER_BUILD_CLOUD.md
  project-status.md
  supabase-setup.md
prisma/
  schema.prisma
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    (auth)/
      auth/
        callback/
          route.ts
        login/
          page.tsx
        register/
          page.tsx
        verify-email/
          page.tsx
    (dashboard)/
      dashboard/
        page.tsx
      layout.tsx
    api/
      health/
        route.ts
    globals.css
    layout.tsx
    page.tsx
  components/
    auth/
      LoginForm.tsx
      RegisterForm.tsx
      UserMenu.tsx
    gamification/
      LevelUpModal.tsx
      XPBar.tsx
      XPNotification.tsx
  lib/
    supabase/
      client.ts
      middleware.ts
      server.ts
    gamification-utils.ts
    gamification.ts
    prisma.ts
    utils.ts
    xp-utils.ts
  types/
    gamification.ts
    learning.ts
  middleware.ts
supabase/
  migrations/
    001_initial_schema.sql
    002_rls_policies.sql
    003_auth_triggers.sql
.dockerignore
.gitignore
architecture.md
build-cloud.sh
CLAUDE.md
docker-compose.dev.yml
docker-compose.yml
Dockerfile
Dockerfile.buildx
Dockerfile.dev
eslint.config.mjs
Initial.md
Makefile
next.config.ts
package.json
postcss.config.mjs
README.BeeMed.md
README.Docker.md
README.md
tailwind.config.ts
test-cloud-build.sh
tsconfig.json
verify-cloud-setup.sh
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".docker/config.json">
{
	"auths": {}
}
</file>

<file path=".github/workflows/docker-build-cloud.yml">
name: Docker Build Cloud

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CLOUD_BUILDER: cloud-mahzyarm-bee
  IMAGE_NAME: beemed
  REGISTRY: docker.io
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push with Docker Build Cloud
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.buildx
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        builder: ${{ env.CLOUD_BUILDER }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        
    - name: Generate build summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Builder**: ${{ env.CLOUD_BUILDER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Images pushed:" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
</file>

<file path="docs/DOCKER_BUILD_CLOUD.md">
# Docker Build Cloud Integration

This document explains how to use Docker Build Cloud with the BeeMed project.

## Overview

Docker Build Cloud provides:
- **Fast builds**: Up to 39x faster builds with cloud infrastructure
- **Multi-architecture support**: Native ARM and AMD builds without emulation
- **Shared cache**: Team members share build cache for faster iterations
- **Parallel builds**: Multiple builds can run simultaneously

## Prerequisites

1. Docker Desktop 4.26.0 or later
2. Docker Build Cloud subscription (or 7-day free trial)
3. Access to the `mahzyarm` organization on Docker Hub

## Quick Start

### 1. Direct Build Command

```bash
# Build for multiple architectures
docker buildx build --builder cloud-mahzyarm-bee \
  --platform linux/amd64,linux/arm64 \
  --tag docker.io/mahzyarm/beemed:latest \
  -f Dockerfile.buildx \
  .
```

### 2. Using Make Commands

```bash
# Build locally (won't push)
make cloud-build

# Build and push to registry
make cloud-push TAG=v1.0.0

# Inspect cloud builder
make cloud-inspect
```

### 3. Using Build Script

```bash
# Make script executable
chmod +x build-cloud.sh

# Build for local use
./build-cloud.sh

# Build and push with custom tag
./build-cloud.sh v1.0.0 linux/amd64,linux/arm64 true
```

## Configuration

### Environment Variables

Update these in `Makefile` or set as environment variables:

```bash
CLOUD_BUILDER=cloud-mahzyarm-bee
REGISTRY=docker.io
NAMESPACE=mahzyarm
IMAGE_NAME=beemed
```

### Builder Setup

If the builder doesn't exist:

```bash
# Create cloud builder
docker buildx create --driver cloud mahzyarm/bee

# Set as default builder
docker buildx use cloud-mahzyarm-bee
```

## Dockerfile Optimization

The `Dockerfile.buildx` is optimized for Docker Build Cloud:

1. **Multi-stage builds**: Reduces final image size
2. **Cache mounts**: Speeds up dependency installation
3. **Multi-architecture support**: Uses `$BUILDPLATFORM` and `$TARGETPLATFORM`
4. **Layer caching**: Optimized COPY order for better cache hits

### Key Features:

```dockerfile
# Cache mount for npm packages
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Cache mount for Next.js build
RUN --mount=type=cache,target=/app/.next/cache \
    npm run build
```

## CI/CD Integration

### GitHub Actions

The workflow `.github/workflows/docker-build-cloud.yml`:
- Builds on push to main/develop
- Creates semantic version tags
- Pushes multi-architecture images
- Uses build cache for faster builds

Required secrets:
- `DOCKER_USERNAME`: Docker Hub username
- `DOCKER_PASSWORD`: Docker Hub access token

### GitLab CI

```yaml
build:
  stage: build
  script:
    - docker buildx build --builder cloud-mahzyarm-bee
      --platform linux/amd64,linux/arm64
      --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      --push .
```

## Build Cache Strategy

The build uses registry-based caching:

```bash
--cache-from type=registry,ref=docker.io/mahzyarm/beemed:buildcache
--cache-to type=registry,ref=docker.io/mahzyarm/beemed:buildcache,mode=max
```

This allows:
- Persistent cache across builds
- Shared cache between team members
- Faster incremental builds

## Troubleshooting

### Builder Not Found

```bash
# List available builders
docker buildx ls

# Create if missing
docker buildx create --driver cloud mahzyarm/bee
```

### Authentication Issues

```bash
# Login to Docker Hub
docker login

# Verify authentication
docker buildx inspect cloud-mahzyarm-bee
```

### Build Timeouts

Docker Build Cloud has a 90-minute timeout. For large builds:
1. Optimize Dockerfile for better caching
2. Use multi-stage builds
3. Minimize build context with `.dockerignore`

### Platform Issues

For single-platform builds:
```bash
# AMD64 only
docker buildx build --builder cloud-mahzyarm-bee \
  --platform linux/amd64 \
  --load .

# ARM64 only  
docker buildx build --builder cloud-mahzyarm-bee \
  --platform linux/arm64 \
  --load .
```

Note: `--load` doesn't work with multi-platform builds. Use `--push` instead.

## Best Practices

1. **Use specific tags**: Avoid overwriting `:latest` in production
2. **Leverage caching**: Order Dockerfile commands for optimal caching
3. **Minimize context**: Use `.dockerignore` to exclude unnecessary files
4. **Security**: Never include secrets in images, use build secrets instead
5. **Multi-stage builds**: Keep production images small

## Monitoring Builds

### Build Logs
```bash
# View real-time logs during build
docker buildx build --builder cloud-mahzyarm-bee \
  --progress plain \
  .
```

### Build History
Check Docker Hub or your registry for:
- Image sizes
- Build times
- Platform support
- Layer information

## Cost Optimization

To optimize Docker Build Cloud usage:
1. Use build cache effectively
2. Build only changed services
3. Schedule non-critical builds during off-peak
4. Monitor monthly build minutes usage

## Additional Resources

- [Docker Build Cloud Docs](https://docs.docker.com/build-cloud/)
- [Buildx Documentation](https://docs.docker.com/buildx/working-with-buildx/)
- [Multi-platform Builds](https://docs.docker.com/build/building/multi-platform/)
- [Build Optimization](https://docs.docker.com/build/cache/)
</file>

<file path="docs/project-status.md">
# BeeMed Project Status Report

**Date**: December 19, 2024  
**Project**: BeeMed - Gamified Medical Education Platform  
**Tech Stack**: Next.js 15, React 19, TypeScript, Supabase, Docker

## 🎯 Project Overview

BeeMed is a gamified medical education platform designed to make learning medicine engaging through XP systems, achievements, and social features. The platform targets medical students globally with interactive courses, quizzes, and collaborative learning.

## ✅ Completed Features

### 1. **Infrastructure & Setup**
- [x] Next.js 15 with React 19 and TypeScript
- [x] HeroUI component library integration
- [x] Tailwind CSS v4 with custom medical theme
- [x] Docker containerization (dev & production)
- [x] Docker Build Cloud configuration
- [x] Multi-architecture support (amd64/arm64)

### 2. **Database Architecture**
- [x] Complete PostgreSQL schema with 26 tables
- [x] Supabase integration (Project ID: `rvtjyrrrklrcurrcirhj`)
- [x] Row Level Security (RLS) policies
- [x] Database migrations applied:
  - `001_initial_schema.sql` - Core tables
  - `002_rls_policies.sql` - Security policies  
  - `003_auth_triggers.sql` - User automation

### 3. **Authentication System**
- [x] Supabase Auth integration
- [x] Login/Register components with validation
- [x] Email verification flow
- [x] OAuth support (GitHub, Google ready)
- [x] Protected routes with middleware
- [x] User session management
- [x] Auto-creation of user profiles on signup

### 4. **Gamification Foundation**
- [x] XP calculation system
- [x] Level progression algorithms
- [x] XP Bar component with animations
- [x] XP Notification system
- [x] Level Up modal celebrations
- [x] Achievement system design
- [x] User progress tracking

### 5. **User Interface**
- [x] Landing page with feature showcase
- [x] Responsive navigation
- [x] User menu with profile dropdown
- [x] Dashboard layout structure
- [x] Loading states and error handling
- [x] Smooth animations with Framer Motion

## 📁 Project Structure

```
BeeMedApp/
├── src/
│   ├── app/                    # Next.js app router
│   │   ├── (auth)/            # Auth pages (login, register)
│   │   ├── (dashboard)/       # Protected dashboard
│   │   └── api/               # API routes
│   ├── components/            # React components
│   │   ├── auth/              # Auth components
│   │   ├── gamification/      # XP, achievements
│   │   └── ui/                # UI components
│   ├── lib/                   # Utilities
│   │   ├── supabase/          # DB clients
│   │   └── gamification.ts    # Game logic
│   └── types/                 # TypeScript types
├── supabase/
│   └── migrations/            # SQL migrations
├── prisma/
│   └── schema.prisma          # Database schema
└── docker/                    # Docker configs
```

## 🗄️ Database Schema Summary

### Core Tables
- **users** - Authentication and roles
- **user_profiles** - Extended user info
- **user_progress** - XP and level tracking

### Learning Content
- **courses** - Medical courses (6 categories)
- **modules** - Course sections
- **lessons** - Individual lessons with rich content
- **quizzes** - Assessments with 4 question types

### Gamification
- **achievements** - Unlockable badges (5 rarities)
- **user_achievements** - User's unlocked achievements
- **loot_items** - Cosmetic rewards
- **inventory_items** - User inventory

### Social Features
- **study_groups** - Collaborative groups
- **forum_posts/comments** - Discussion system
- **mentorships** - Mentor/mentee connections
- **notifications** - Real-time updates

## 🔧 Environment Configuration

```env
# Supabase (Configured)
NEXT_PUBLIC_SUPABASE_URL="https://rvtjyrrrklrcurrcirhj.supabase.co"
NEXT_PUBLIC_SUPABASE_ANON_KEY="eyJhbGc..."
DATABASE_URL="postgresql://postgres:***@db.rvtjyrrrklrcurrcirhj.supabase.co:5432/postgres"

# Pending Configuration
SUPABASE_SERVICE_ROLE_KEY="pending"
NEXTAUTH_SECRET="pending"
SOCKET_URL="pending"
REDIS_URL="pending"
```

## 📊 Current Statistics

- **Total Files**: 63
- **Total Lines of Code**: ~49,637 tokens
- **Database Tables**: 26
- **Components Created**: 10+
- **API Routes**: 2 (health, auth callback)

## 🚧 In Progress

1. **Authentication Configuration**
   - Enable email/password in Supabase dashboard
   - Configure OAuth providers
   - Set up email templates

2. **Course System**
   - Course listing page
   - Course detail views
   - Lesson content renderer
   - Module navigation

## 📋 TODO List

### High Priority
- [ ] Create course browsing interface
- [ ] Build lesson viewing components
- [ ] Implement quiz taking system
- [ ] Add achievement unlocking logic

### Medium Priority
- [ ] Leaderboard implementation
- [ ] Study group creation/joining
- [ ] Forum functionality
- [ ] Real-time notifications

### Low Priority
- [ ] Mentorship matching system
- [ ] Advanced analytics dashboard
- [ ] Mobile app considerations
- [ ] Internationalization

## 🚀 Deployment Readiness

### ✅ Ready
- Docker images (multi-arch)
- Database migrations
- Environment variable structure
- Build pipeline

### ⚠️ Needs Configuration
- Supabase service role key
- Email service setup
- OAuth app credentials
- Production domain

### 🎯 Recommended Deployment
**Vercel + Supabase** for fastest go-live:
```bash
vercel --prod
```

## 🔐 Security Status

- [x] Row Level Security enabled
- [x] Authentication middleware
- [x] Environment variables secured
- [x] SQL injection protection (Prisma)
- [ ] Rate limiting (pending)
- [ ] CORS configuration (pending)

## 📈 Performance Optimizations

- [x] Lazy loading with dynamic imports
- [x] Image optimization ready
- [x] Database indexes created
- [ ] Redis caching (infrastructure ready)
- [ ] CDN configuration (pending)

## 🧪 Testing Status

- [ ] Unit tests setup
- [ ] Component tests
- [ ] E2E test framework
- [ ] API integration tests

## 💡 Key Decisions Made

1. **HeroUI over shadcn/ui** - Better gamification components
2. **Supabase for all data** - Simplifies architecture
3. **Docker-first deployment** - Flexibility in hosting
4. **Aggressive code splitting** - Keep files under 250 lines
5. **RLS for security** - Database-level protection

## 🎉 Next Immediate Steps

1. **Configure Supabase Auth**:
   - Enable providers in dashboard
   - Test registration flow
   - Verify email sending

2. **Create First Course**:
   - Add sample course data
   - Build course listing page
   - Implement enrollment

3. **Deploy MVP**:
   ```bash
   vercel --prod
   ```

## 📚 Documentation

- `/README.md` - Project overview
- `/docs/supabase-setup.md` - Database setup guide
- `/architecture.md` - Technical architecture
- `/CLAUDE.md` - Development guidelines
- `/repomix-output.xml` - Full codebase export

---

**Project Health**: 🟢 Excellent  
**Ready for**: Alpha deployment  
**Next Milestone**: First course implementation
</file>

<file path="docs/supabase-setup.md">
# Supabase Setup Guide for BeeMed

## Overview

BeeMed uses Supabase for:
- PostgreSQL database
- Authentication (email/password, OAuth)
- Real-time subscriptions
- Row Level Security
- File storage

## Setup Steps

### 1. Create a New Supabase Project

Since you're using a Vercel-managed organization, you'll need to:

1. Go to [Vercel Dashboard](https://vercel.com/dashboard)
2. Navigate to your project's integrations
3. Add Supabase integration
4. Create a new Supabase project named "BeeMed"

### 2. Configure Environment Variables

Once your project is created, add these to your `.env.local`:

```env
NEXT_PUBLIC_SUPABASE_URL=https://[YOUR-PROJECT-REF].supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=[YOUR-ANON-KEY]
SUPABASE_SERVICE_ROLE_KEY=[YOUR-SERVICE-ROLE-KEY]
```

### 3. Run Database Migrations

The migrations are already prepared in the `supabase/migrations/` directory:

1. **Initial Schema** (`001_initial_schema.sql`): Creates all tables, types, and indexes
2. **RLS Policies** (`002_rls_policies.sql`): Sets up Row Level Security
3. **Auth Triggers** (`003_auth_triggers.sql`): Handles user creation/deletion

To apply them:

1. Go to your Supabase project dashboard
2. Navigate to the SQL Editor
3. Run each migration file in order

### 4. Configure Authentication

In your Supabase dashboard:

1. Go to Authentication → Providers
2. Enable Email/Password authentication
3. (Optional) Enable OAuth providers:
   - GitHub
   - Google
   - Discord (popular with students)

### 5. Configure Email Templates

Go to Authentication → Email Templates and customize:
- Confirmation email
- Password reset email
- Magic link email

### 6. Storage Buckets

Create these storage buckets:

1. `avatars` - User profile pictures
2. `course-images` - Course thumbnails
3. `lesson-content` - Videos and images for lessons
4. `achievements` - Achievement icons

Set appropriate policies for each bucket.

## Database Schema Overview

### Core Tables

- **users** - Extends Supabase auth.users
- **user_profiles** - Additional user information
- **user_progress** - XP, levels, streaks

### Gamification

- **achievements** - Achievement definitions
- **user_achievements** - Unlocked achievements
- **loot_items** - Cosmetic rewards
- **inventory_items** - User's loot collection

### Learning Content

- **courses** - Medical courses
- **modules** - Course sections
- **lessons** - Individual lessons
- **quizzes** - Assessments
- **questions/answers** - Quiz content

### Social Features

- **study_groups** - Collaborative groups
- **forum_posts/comments** - Discussion forums
- **mentorships** - Mentor/mentee relationships

## Row Level Security

All tables have RLS enabled with appropriate policies:

- Students can only view/edit their own data
- Course content is viewable by enrolled students
- Instructors can manage course content
- Admins have full access

## Next Steps

After setup:

1. Test authentication flow
2. Seed initial data (courses, achievements)
3. Configure Supabase Realtime for live features
4. Set up Edge Functions for complex logic

## Troubleshooting

### Common Issues

1. **RLS blocking access**: Check auth.uid() is set correctly
2. **Migration errors**: Ensure UUID extension is enabled
3. **Auth not working**: Verify environment variables are set

### Useful Queries

Check if user exists:
```sql
SELECT * FROM auth.users WHERE email = 'test@example.com';
```

View user's full profile:
```sql
SELECT u.*, up.*, prog.*
FROM public.users u
LEFT JOIN public.user_profiles up ON u.id = up.user_id
LEFT JOIN public.user_progress prog ON u.id = prog.user_id
WHERE u.email = 'test@example.com';
```
</file>

<file path="prisma/schema.prisma">
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id               String             @id @default(cuid())
  email            String             @unique
  username         String             @unique
  passwordHash     String
  role             UserRole           @default(STUDENT)
  profile          UserProfile?
  progress         UserProgress?
  achievements     UserAchievement[]
  inventory        InventoryItem[]
  quizAttempts     QuizAttempt[]
  courseEnrollments Enrollment[]
  studyGroups      StudyGroupMember[]
  forumPosts       ForumPost[]
  forumComments    ForumComment[]
  mentorships      Mentorship[]      @relation("MentorRelation")
  mentees          Mentorship[]      @relation("MenteeRelation")
  notifications    Notification[]
  sessions         Session[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model UserProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName    String
  bio            String?
  avatarUrl      String?
  medicalSchool  String?
  yearOfStudy    Int?
  specialization String?
  location       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Gamification System
model UserProgress {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalXp           Int      @default(0)
  currentLevel      Int      @default(1)
  currentLevelXp    Int      @default(0)
  nextLevelXp       Int      @default(100)
  dailyStreak       Int      @default(0)
  longestStreak     Int      @default(0)
  lastActivityDate  DateTime?
  weeklyXp          Int      @default(0)
  monthlyXp         Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Achievement {
  id              String            @id @default(cuid())
  code            String            @unique
  name            String
  description     String
  category        AchievementCategory
  rarity          Rarity
  iconUrl         String?
  xpReward        Int               @default(0)
  unlockedBy      UserAchievement[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  unlockedAt    DateTime    @default(now())
  
  @@unique([userId, achievementId])
}

model LootItem {
  id          String          @id @default(cuid())
  code        String          @unique
  name        String
  description String
  type        LootItemType
  rarity      Rarity
  imageUrl    String?
  effect      Json?           // Store item effects as JSON
  inventory   InventoryItem[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model InventoryItem {
  id         String   @id @default(cuid())
  userId     String
  lootItemId String
  quantity   Int      @default(1)
  equipped   Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lootItem   LootItem @relation(fields: [lootItemId], references: [id])
  obtainedAt DateTime @default(now())
  
  @@unique([userId, lootItemId])
}

// Learning Content
model Course {
  id            String       @id @default(cuid())
  code          String       @unique
  title         String
  description   String
  category      CourseCategory
  difficulty    Difficulty
  imageUrl      String?
  totalXp       Int          @default(0)
  duration      Int          // in hours
  modules       Module[]
  enrollments   Enrollment[]
  prerequisites Course[]     @relation("CoursePrerequisites")
  requiredFor   Course[]     @relation("CoursePrerequisites")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order       Int
  title       String
  description String
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([courseId, order])
}

model Lesson {
  id            String         @id @default(cuid())
  moduleId      String
  module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  order         Int
  title         String
  content       Json           // Rich content stored as JSON
  videoUrl      String?
  duration      Int            // in minutes
  xpReward      Int            @default(50)
  quizzes       Quiz[]
  completions   LessonProgress[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([moduleId, order])
}

model Quiz {
  id          String        @id @default(cuid())
  lessonId    String?
  lesson      Lesson?       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  title       String
  description String?
  timeLimit   Int?          // in minutes
  xpReward    Int           @default(100)
  questions   Question[]
  attempts    QuizAttempt[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Question {
  id              String           @id @default(cuid())
  quizId          String
  quiz            Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  order           Int
  type            QuestionType
  text            String
  explanation     String?
  imageUrl        String?
  points          Int              @default(10)
  answers         Answer[]
  userAnswers     UserAnswer[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([quizId, order])
}

model Answer {
  id           String       @id @default(cuid())
  questionId   String
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text         String
  isCorrect    Boolean      @default(false)
  userAnswers  UserAnswer[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// Progress Tracking
model Enrollment {
  id             String           @id @default(cuid())
  userId         String
  courseId       String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress       Int              @default(0) // percentage
  completedAt    DateTime?
  lessonProgress LessonProgress[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  @@unique([userId, courseId])
}

model LessonProgress {
  id           String     @id @default(cuid())
  enrollmentId String
  lessonId     String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson       Lesson     @relation(fields: [lessonId], references: [id])
  completed    Boolean    @default(false)
  xpEarned     Int        @default(0)
  completedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  @@unique([enrollmentId, lessonId])
}

model QuizAttempt {
  id           String       @id @default(cuid())
  userId       String
  quizId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz         Quiz         @relation(fields: [quizId], references: [id])
  score        Int
  totalPoints  Int
  xpEarned     Int          @default(0)
  timeSpent    Int?         // in seconds
  passed       Boolean      @default(false)
  userAnswers  UserAnswer[]
  completedAt  DateTime     @default(now())
  
  @@index([userId, quizId])
}

model UserAnswer {
  id            String      @id @default(cuid())
  attemptId     String
  questionId    String
  answerId      String?
  attempt       QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question      Question    @relation(fields: [questionId], references: [id])
  answer        Answer?     @relation(fields: [answerId], references: [id])
  textAnswer    String?     // For open-ended questions
  isCorrect     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  
  @@unique([attemptId, questionId])
}

// Social Features
model StudyGroup {
  id          String             @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  isPrivate   Boolean            @default(false)
  maxMembers  Int                @default(20)
  members     StudyGroupMember[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model StudyGroupMember {
  id           String     @id @default(cuid())
  userId       String
  groupId      String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group        StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role         GroupRole  @default(MEMBER)
  joinedAt     DateTime   @default(now())
  
  @@unique([userId, groupId])
}

model ForumCategory {
  id          String      @id @default(cuid())
  name        String
  description String?
  slug        String      @unique
  order       Int         @default(0)
  posts       ForumPost[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ForumPost {
  id           String         @id @default(cuid())
  authorId     String
  categoryId   String
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category     ForumCategory  @relation(fields: [categoryId], references: [id])
  title        String
  content      String
  isPinned     Boolean        @default(false)
  viewCount    Int            @default(0)
  comments     ForumComment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ForumComment {
  id        String       @id @default(cuid())
  postId    String
  authorId  String
  post      ForumPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  upvotes   Int          @default(0)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Mentorship {
  id        String   @id @default(cuid())
  mentorId  String
  menteeId  String
  mentor    User     @relation("MentorRelation", fields: [mentorId], references: [id], onDelete: Cascade)
  mentee    User     @relation("MenteeRelation", fields: [menteeId], references: [id], onDelete: Cascade)
  status    MentorshipStatus @default(PENDING)
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([mentorId, menteeId])
}

// Notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

// Enums
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum Rarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}

enum AchievementCategory {
  LEARNING
  SOCIAL
  CONSISTENCY
  MASTERY
  SPECIAL
}

enum LootItemType {
  AVATAR_FRAME
  BADGE
  TITLE
  XP_BOOST
  THEME
}

enum CourseCategory {
  ANATOMY
  PHYSIOLOGY
  PATHOLOGY
  PHARMACOLOGY
  CLINICAL_SKILLS
  MEDICAL_ETHICS
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  OPEN_ENDED
  CASE_STUDY
}

enum GroupRole {
  OWNER
  MODERATOR
  MEMBER
}

enum MentorshipStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum NotificationType {
  ACHIEVEMENT_UNLOCKED
  LEVEL_UP
  QUIZ_COMPLETED
  COURSE_COMPLETED
  STUDY_GROUP_INVITE
  MENTORSHIP_REQUEST
  SYSTEM
}
</file>

<file path="src/app/(auth)/auth/callback/route.ts">
import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  const next = searchParams.get('next') ?? '/dashboard'

  if (code) {
    const supabase = await createClient()
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      return NextResponse.redirect(`${origin}${next}`)
    }
  }

  // Return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`)
}
</file>

<file path="src/app/(auth)/auth/login/page.tsx">
import LoginForm from '@/components/auth/LoginForm'
import Link from 'next/link'
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Login | BeeMed',
  description: 'Log in to your BeeMed account',
}

export default function LoginPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full space-y-8">
        <div className="text-center">
          <Link href="/" className="inline-block">
            <h2 className="text-4xl font-bold text-primary-600">🐝 BeeMed</h2>
          </Link>
          <p className="mt-2 text-gray-600">Gamified Medical Education</p>
        </div>
        <LoginForm />
      </div>
    </div>
  )
}
</file>

<file path="src/app/(auth)/auth/register/page.tsx">
import RegisterForm from '@/components/auth/RegisterForm'
import Link from 'next/link'
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Sign Up | BeeMed',
  description: 'Create your BeeMed account',
}

export default function RegisterPage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full space-y-8">
        <div className="text-center">
          <Link href="/" className="inline-block">
            <h2 className="text-4xl font-bold text-primary-600">🐝 BeeMed</h2>
          </Link>
          <p className="mt-2 text-gray-600">Gamified Medical Education</p>
        </div>
        <RegisterForm />
      </div>
    </div>
  )
}
</file>

<file path="src/app/(auth)/auth/verify-email/page.tsx">
import { Card, CardBody, CardHeader, Button, Link } from '@heroui/react'
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Verify Email | BeeMed',
  description: 'Verify your email address',
}

export default function VerifyEmailPage({
  searchParams,
}: {
  searchParams: { email?: string }
}) {
  const email = searchParams.email || 'your email'

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <Link href="/" className="inline-block">
            <h2 className="text-4xl font-bold text-primary-600">🐝 BeeMed</h2>
          </Link>
          <p className="mt-2 text-gray-600">Gamified Medical Education</p>
        </div>

        <Card>
          <CardHeader className="text-center pb-0">
            <div className="mx-auto w-16 h-16 bg-success-100 rounded-full flex items-center justify-center mb-4">
              <svg
                className="w-8 h-8 text-success-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M3 19v-8.93a2 2 0 01.89-1.664l7-4.666a2 2 0 012.22 0l7 4.666A2 2 0 0121 10.07V19M3 19a2 2 0 002 2h14a2 2 0 002-2M3 19l6.75-4.5M21 19l-6.75-4.5M3 10l6.75 4.5M21 10l-6.75 4.5m0 0l-1.14.76a2 2 0 01-2.22 0l-1.14-.76"
                />
              </svg>
            </div>
            <h1 className="text-2xl font-bold">Check Your Email</h1>
          </CardHeader>
          <CardBody className="text-center space-y-4">
            <p className="text-gray-600">
              We've sent a verification email to <strong>{email}</strong>
            </p>
            <p className="text-sm text-gray-500">
              Please click the link in the email to verify your account and start your medical learning journey.
            </p>
            <div className="pt-4">
              <p className="text-sm text-gray-500 mb-2">
                Didn't receive the email? Check your spam folder or
              </p>
              <Button variant="light" color="primary" size="sm">
                Resend verification email
              </Button>
            </div>
            <div className="pt-4">
              <Link href="/auth/login" className="text-sm">
                Back to login
              </Link>
            </div>
          </CardBody>
        </Card>
      </div>
    </div>
  )
}
</file>

<file path="src/app/(dashboard)/dashboard/page.tsx">
import { createClient } from '@/lib/supabase/server'
import { Card, CardBody, CardHeader, Progress, Button } from '@heroui/react'
import { formatXP, getLevelTitle } from '@/lib/gamification'
import XPBar from '@/components/gamification/XPBar'
import Link from 'next/link'

export default async function DashboardPage() {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()

  if (!user) return null

  // Fetch user data with progress
  const { data: userData } = await supabase
    .from('users')
    .select(`
      *,
      profile:user_profiles(*),
      progress:user_progress(*),
      enrollments(
        *,
        course:courses(*)
      ),
      achievements:user_achievements(
        achievement:achievements(*)
      )
    `)
    .eq('id', user.id)
    .single()

  const displayName = userData?.profile?.display_name || userData?.username || 'Student'
  const progress = userData?.progress || {
    total_xp: 0,
    current_level: 1,
    current_level_xp: 0,
    next_level_xp: 100,
    daily_streak: 0,
    weekly_xp: 0,
  }

  const recentAchievements = userData?.achievements?.slice(0, 3) || []
  const enrolledCourses = userData?.enrollments || []

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">
          Welcome back, {displayName}!
        </h1>
        <p className="text-gray-600 mt-1">
          {getLevelTitle(progress.current_level)} · Level {progress.current_level}
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <Card className="lg:col-span-2">
          <CardHeader>
            <h2 className="text-xl font-semibold">Your Progress</h2>
          </CardHeader>
          <CardBody className="space-y-6">
            <div>
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm text-gray-600">Total XP</span>
                <span className="text-2xl font-bold text-primary-600">
                  {formatXP(progress.total_xp)}
                </span>
              </div>
              <XPBar
                currentXP={progress.current_level_xp}
                requiredXP={progress.next_level_xp}
                level={progress.current_level}
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="bg-gray-50 rounded-lg p-4">
                <p className="text-sm text-gray-600">Daily Streak</p>
                <p className="text-2xl font-bold">
                  {progress.daily_streak} {progress.daily_streak === 1 ? 'day' : 'days'}
                </p>
              </div>
              <div className="bg-gray-50 rounded-lg p-4">
                <p className="text-sm text-gray-600">Weekly XP</p>
                <p className="text-2xl font-bold">{formatXP(progress.weekly_xp)}</p>
              </div>
            </div>
          </CardBody>
        </Card>

        <Card>
          <CardHeader>
            <h2 className="text-xl font-semibold">Recent Achievements</h2>
          </CardHeader>
          <CardBody>
            {recentAchievements.length > 0 ? (
              <div className="space-y-3">
                {recentAchievements.map((ua: any) => (
                  <div key={ua.achievement.id} className="flex items-center gap-3">
                    <div className="w-12 h-12 bg-primary-100 rounded-full flex items-center justify-center">
                      🏆
                    </div>
                    <div className="flex-1">
                      <p className="font-medium text-sm">{ua.achievement.name}</p>
                      <p className="text-xs text-gray-500">
                        +{ua.achievement.xp_reward} XP
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-8">
                Complete courses to earn achievements!
              </p>
            )}
          </CardBody>
        </Card>
      </div>

      <Card>
        <CardHeader className="flex justify-between items-center">
          <h2 className="text-xl font-semibold">Your Courses</h2>
          <Button color="primary" size="sm" as={Link} href="/courses">
            Browse Courses
          </Button>
        </CardHeader>
        <CardBody>
          {enrolledCourses.length > 0 ? (
            <div className="space-y-4">
              {enrolledCourses.map((enrollment: any) => (
                <div
                  key={enrollment.id}
                  className="border rounded-lg p-4 hover:shadow-md transition-shadow"
                >
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <h3 className="font-semibold">{enrollment.course.title}</h3>
                      <p className="text-sm text-gray-600">
                        {enrollment.course.category.replace('_', ' ')}
                      </p>
                    </div>
                    <span className="text-sm font-medium text-primary-600">
                      {enrollment.progress}% Complete
                    </span>
                  </div>
                  <Progress value={enrollment.progress} className="mt-2" />
                  <div className="mt-3">
                    <Button
                      size="sm"
                      variant="flat"
                      color="primary"
                      as={Link}
                      href={`/courses/${enrollment.course.id}`}
                    >
                      Continue Learning
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <p className="text-gray-500 mb-4">
                You haven't enrolled in any courses yet
              </p>
              <Button color="primary" as={Link} href="/courses">
                Explore Courses
              </Button>
            </div>
          )}
        </CardBody>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/(dashboard)/layout.tsx">
import { redirect } from 'next/navigation'
import { createClient } from '@/lib/supabase/server'
import UserMenu from '@/components/auth/UserMenu'
import Link from 'next/link'

export default async function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()

  if (!user) {
    redirect('/auth/login')
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/dashboard" className="flex items-center">
                <span className="text-2xl font-bold text-primary-600">🐝 BeeMed</span>
              </Link>
              <div className="hidden sm:ml-8 sm:flex sm:space-x-6">
                <Link
                  href="/dashboard"
                  className="text-gray-900 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors"
                >
                  Dashboard
                </Link>
                <Link
                  href="/courses"
                  className="text-gray-900 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors"
                >
                  Courses
                </Link>
                <Link
                  href="/achievements"
                  className="text-gray-900 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors"
                >
                  Achievements
                </Link>
                <Link
                  href="/leaderboard"
                  className="text-gray-900 hover:text-primary-600 px-3 py-2 text-sm font-medium transition-colors"
                >
                  Leaderboard
                </Link>
              </div>
            </div>
            <div className="flex items-center">
              <UserMenu />
            </div>
          </div>
        </div>
      </nav>
      <main>{children}</main>
    </div>
  )
}
</file>

<file path="src/app/api/health/route.ts">
import { NextResponse } from 'next/server'

export async function GET() {
  const healthCheck = {
    status: 'healthy',
    timestamp: new Date().toISOString(),
    service: 'BeeMed API',
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
  }

  return NextResponse.json(healthCheck, { status: 200 })
}
</file>

<file path="src/components/auth/LoginForm.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import { Button, Input, Card, CardBody, CardHeader, Divider, Link } from '@heroui/react'
import { motion } from 'framer-motion'

export default function LoginForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()
  const supabase = createClient()

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError(null)

    try {
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })

      if (error) throw error

      router.push('/dashboard')
      router.refresh()
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  const handleOAuthLogin = async (provider: 'github' | 'google') => {
    setLoading(true)
    setError(null)

    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider,
        options: {
          redirectTo: `${window.location.origin}/auth/callback`,
        },
      })

      if (error) throw error
    } catch (error: any) {
      setError(error.message)
      setLoading(false)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="flex flex-col gap-1 px-6 py-6">
          <h1 className="text-2xl font-bold text-center">Welcome Back!</h1>
          <p className="text-sm text-gray-500 text-center">
            Log in to continue your medical journey
          </p>
        </CardHeader>
        <Divider />
        <CardBody className="px-6 py-6">
          <form onSubmit={handleLogin} className="space-y-4">
            <Input
              type="email"
              label="Email"
              placeholder="Enter your email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              variant="bordered"
              isDisabled={loading}
            />
            <Input
              type="password"
              label="Password"
              placeholder="Enter your password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              variant="bordered"
              isDisabled={loading}
            />
            
            {error && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="p-3 rounded-lg bg-danger-50 text-danger-600 text-sm"
              >
                {error}
              </motion.div>
            )}

            <Button
              type="submit"
              color="primary"
              className="w-full"
              isLoading={loading}
              disabled={loading}
            >
              Log In
            </Button>
          </form>

          <div className="relative my-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-200"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">Or continue with</span>
            </div>
          </div>

          <div className="space-y-3">
            <Button
              variant="flat"
              className="w-full"
              startContent={
                <svg className="w-5 h-5" viewBox="0 0 24 24">
                  <path
                    fill="currentColor"
                    d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
                  />
                </svg>
              }
              onClick={() => handleOAuthLogin('github')}
              isDisabled={loading}
            >
              Continue with GitHub
            </Button>

            <Button
              variant="flat"
              className="w-full"
              startContent={
                <svg className="w-5 h-5" viewBox="0 0 24 24">
                  <path
                    fill="currentColor"
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  />
                  <path
                    fill="currentColor"
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  />
                  <path
                    fill="currentColor"
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  />
                  <path
                    fill="currentColor"
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  />
                </svg>
              }
              onClick={() => handleOAuthLogin('google')}
              isDisabled={loading}
            >
              Continue with Google
            </Button>
          </div>

          <div className="mt-6 text-center text-sm">
            <span className="text-gray-500">Don't have an account? </span>
            <Link href="/auth/register" size="sm">
              Sign up
            </Link>
          </div>

          <div className="mt-2 text-center">
            <Link href="/auth/reset-password" size="sm">
              Forgot password?
            </Link>
          </div>
        </CardBody>
      </Card>
    </motion.div>
  )
}
</file>

<file path="src/components/auth/RegisterForm.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import { Button, Input, Card, CardBody, CardHeader, Divider, Link, Checkbox } from '@heroui/react'
import { motion } from 'framer-motion'

export default function RegisterForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [username, setUsername] = useState('')
  const [displayName, setDisplayName] = useState('')
  const [acceptTerms, setAcceptTerms] = useState(false)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()
  const supabase = createClient()

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError(null)

    // Validation
    if (password !== confirmPassword) {
      setError('Passwords do not match')
      setLoading(false)
      return
    }

    if (password.length < 6) {
      setError('Password must be at least 6 characters')
      setLoading(false)
      return
    }

    if (!acceptTerms) {
      setError('Please accept the terms and conditions')
      setLoading(false)
      return
    }

    try {
      const { error } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            username,
            display_name: displayName || username,
          },
        },
      })

      if (error) throw error

      // Show success message
      router.push('/auth/verify-email?email=' + encodeURIComponent(email))
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="flex flex-col gap-1 px-6 py-6">
          <h1 className="text-2xl font-bold text-center">Join BeeMed</h1>
          <p className="text-sm text-gray-500 text-center">
            Start your gamified medical learning journey
          </p>
        </CardHeader>
        <Divider />
        <CardBody className="px-6 py-6">
          <form onSubmit={handleRegister} className="space-y-4">
            <Input
              type="email"
              label="Email"
              placeholder="Enter your email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              variant="bordered"
              isDisabled={loading}
            />
            
            <Input
              type="text"
              label="Username"
              placeholder="Choose a username"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
              variant="bordered"
              isDisabled={loading}
              description="This will be your unique identifier"
            />

            <Input
              type="text"
              label="Display Name"
              placeholder="Your display name (optional)"
              value={displayName}
              onChange={(e) => setDisplayName(e.target.value)}
              variant="bordered"
              isDisabled={loading}
            />

            <Input
              type="password"
              label="Password"
              placeholder="Create a password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              variant="bordered"
              isDisabled={loading}
              description="Minimum 6 characters"
            />

            <Input
              type="password"
              label="Confirm Password"
              placeholder="Confirm your password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              variant="bordered"
              isDisabled={loading}
            />

            <Checkbox
              isSelected={acceptTerms}
              onValueChange={setAcceptTerms}
              isDisabled={loading}
              size="sm"
            >
              I accept the{' '}
              <Link href="/terms" size="sm" target="_blank">
                Terms and Conditions
              </Link>{' '}
              and{' '}
              <Link href="/privacy" size="sm" target="_blank">
                Privacy Policy
              </Link>
            </Checkbox>
            
            {error && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="p-3 rounded-lg bg-danger-50 text-danger-600 text-sm"
              >
                {error}
              </motion.div>
            )}

            <Button
              type="submit"
              color="primary"
              className="w-full"
              isLoading={loading}
              disabled={loading || !acceptTerms}
            >
              Create Account
            </Button>
          </form>

          <div className="mt-6 text-center text-sm">
            <span className="text-gray-500">Already have an account? </span>
            <Link href="/auth/login" size="sm">
              Log in
            </Link>
          </div>
        </CardBody>
      </Card>
    </motion.div>
  )
}
</file>

<file path="src/components/auth/UserMenu.tsx">
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { createClient } from '@/lib/supabase/client'
import {
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  DropdownSection,
  Avatar,
  User,
  Skeleton,
} from '@heroui/react'
import { formatXP } from '@/lib/gamification'

interface UserData {
  id: string
  email: string
  username: string
  profile?: {
    display_name: string
    avatar_url: string | null
  }
  progress?: {
    total_xp: number
    current_level: number
  }
}

export default function UserMenu() {
  const [user, setUser] = useState<UserData | null>(null)
  const [loading, setLoading] = useState(true)
  const router = useRouter()
  const supabase = createClient()

  useEffect(() => {
    loadUser()
  }, [])

  const loadUser = async () => {
    try {
      const { data: { user: authUser } } = await supabase.auth.getUser()
      
      if (!authUser) {
        setLoading(false)
        return
      }

      const { data, error } = await supabase
        .from('users')
        .select(`
          *,
          profile:user_profiles(*),
          progress:user_progress(*)
        `)
        .eq('id', authUser.id)
        .single()

      if (error) throw error

      setUser(data)
    } catch (error) {
      console.error('Error loading user:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleLogout = async () => {
    await supabase.auth.signOut()
    router.push('/')
    router.refresh()
  }

  if (loading) {
    return (
      <div className="flex items-center gap-3">
        <Skeleton className="w-32 h-8 rounded-lg" />
        <Skeleton className="w-10 h-10 rounded-full" />
      </div>
    )
  }

  if (!user) return null

  const displayName = user.profile?.display_name || user.username
  const avatarUrl = user.profile?.avatar_url || undefined
  const level = user.progress?.current_level || 1
  const totalXp = user.progress?.total_xp || 0

  return (
    <Dropdown placement="bottom-end">
      <DropdownTrigger>
        <div className="flex items-center gap-3 cursor-pointer">
          <div className="text-right">
            <p className="text-sm font-medium">{displayName}</p>
            <p className="text-xs text-gray-500">
              Level {level} · {formatXP(totalXp)} XP
            </p>
          </div>
          <Avatar
            isBordered
            as="button"
            className="transition-transform"
            color="primary"
            name={displayName}
            size="sm"
            src={avatarUrl}
          />
        </div>
      </DropdownTrigger>
      <DropdownMenu aria-label="User menu" variant="flat">
        <DropdownSection title="Profile" showDivider>
          <DropdownItem
            key="profile"
            description={`@${user.username}`}
            className="h-14 gap-2"
          >
            <User
              name={displayName}
              description={`Level ${level} · ${formatXP(totalXp)} XP`}
              avatarProps={{
                src: avatarUrl,
                name: displayName,
              }}
            />
          </DropdownItem>
        </DropdownSection>
        <DropdownSection title="Actions" showDivider>
          <DropdownItem key="dashboard" onClick={() => router.push('/dashboard')}>
            Dashboard
          </DropdownItem>
          <DropdownItem key="courses" onClick={() => router.push('/courses')}>
            My Courses
          </DropdownItem>
          <DropdownItem key="achievements" onClick={() => router.push('/achievements')}>
            Achievements
          </DropdownItem>
          <DropdownItem key="settings" onClick={() => router.push('/settings')}>
            Settings
          </DropdownItem>
        </DropdownSection>
        <DropdownSection>
          <DropdownItem key="logout" color="danger" onClick={handleLogout}>
            Log Out
          </DropdownItem>
        </DropdownSection>
      </DropdownMenu>
    </Dropdown>
  )
}
</file>

<file path="src/components/gamification/LevelUpModal.tsx">
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { 
  Modal, 
  ModalContent, 
  ModalHeader, 
  ModalBody, 
  Button,
  Card
} from '@heroui/react'
import { getLevelTitle, getLevelPerks } from '@/lib/xp-utils'
import { cn } from '@/lib/utils'

interface LevelUpModalProps {
  isOpen: boolean
  onClose: () => void
  newLevel: number
  previousLevel: number
}

export default function LevelUpModal({
  isOpen,
  onClose,
  newLevel,
  previousLevel
}: LevelUpModalProps) {
  const newTitle = getLevelTitle(newLevel)
  const newPerks = getLevelPerks(newLevel)
  const previousPerks = getLevelPerks(previousLevel)
  const unlockedPerks = newPerks.filter(perk => !previousPerks.includes(perk))

  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose}
      size="lg"
      backdrop="blur"
      classNames={{
        base: "bg-gradient-to-br from-primary-50 to-primary-100 dark:from-primary-900 dark:to-primary-800",
        header: "border-b-0",
        body: "py-6",
      }}
    >
      <ModalContent>
        <ModalHeader className="flex flex-col items-center pt-6">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ 
              type: "spring", 
              stiffness: 300, 
              damping: 15,
              delay: 0.2
            }}
            className="mb-4"
          >
            <motion.div
              animate={{
                scale: [1, 1.1, 1],
                rotate: [0, 5, -5, 0]
              }}
              transition={{
                duration: 2,
                repeat: Infinity,
                repeatType: "loop"
              }}
              className="text-8xl"
            >
              🎉
            </motion.div>
          </motion.div>
          
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="text-3xl font-bold bg-gradient-to-r from-primary-500 to-primary-700 bg-clip-text text-transparent"
          >
            Level Up!
          </motion.h2>
        </ModalHeader>
        
        <ModalBody className="text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            className="space-y-4"
          >
            <div className="text-5xl font-bold text-primary">
              Level {newLevel}
            </div>
            
            <div className="text-xl text-default-600">
              {newTitle}
            </div>
            
            {unlockedPerks.length > 0 && (
              <Card className="mt-6 p-4 bg-primary-50 dark:bg-primary-900/20">
                <h3 className="text-lg font-semibold mb-3 text-primary">
                  New Perks Unlocked!
                </h3>
                <div className="space-y-2">
                  {unlockedPerks.map((perk, index) => (
                    <motion.div
                      key={perk}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 0.8 + index * 0.1 }}
                      className="flex items-center gap-2 text-sm"
                    >
                      <span className="text-primary">✓</span>
                      <span>{perk}</span>
                    </motion.div>
                  ))}
                </div>
              </Card>
            )}
            
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 1 }}
            >
              <Button
                color="primary"
                size="lg"
                onPress={onClose}
                className="mt-4 font-semibold"
              >
                Continue Learning
              </Button>
            </motion.div>
          </motion.div>
        </ModalBody>
      </ModalContent>
    </Modal>
  )
}
</file>

<file path="src/components/gamification/XPBar.tsx">
'use client'

import { motion } from 'framer-motion'
import { Progress, Tooltip } from '@heroui/react'
import { cn } from '@/lib/utils'
import { 
  calculateLevel, 
  calculateXPToNextLevel, 
  getLevelProgress, 
  getLevelTitle,
  formatXP 
} from '@/lib/xp-utils'

interface XPBarProps {
  currentXP: number
  showDetails?: boolean
  animate?: boolean
  className?: string
}

export default function XPBar({ 
  currentXP, 
  showDetails = true, 
  animate = true,
  className 
}: XPBarProps) {
  const currentLevel = calculateLevel(currentXP)
  const xpToNextLevel = calculateXPToNextLevel(currentXP)
  const progress = getLevelProgress(currentXP)
  const levelTitle = getLevelTitle(currentLevel)

  return (
    <div className={cn("w-full space-y-2", className)}>
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <motion.div
            initial={animate ? { scale: 0 } : undefined}
            animate={{ scale: 1 }}
            transition={{ type: "spring", stiffness: 300, damping: 20 }}
            className="flex items-center gap-2"
          >
            <span className="text-2xl font-bold text-primary">
              Level {currentLevel}
            </span>
            <span className="text-sm text-default-500">
              {levelTitle}
            </span>
          </motion.div>
        </div>
        
        {showDetails && (
          <Tooltip content={`Total XP: ${formatXP(currentXP)}`}>
            <span className="text-sm text-default-500">
              {formatXP(currentXP)} / {formatXP(currentXP + xpToNextLevel)} XP
            </span>
          </Tooltip>
        )}
      </div>

      <div className="relative">
        <Progress
          value={progress}
          color="primary"
          size="lg"
          className="h-6"
          classNames={{
            indicator: cn(
              "bg-gradient-to-r from-primary-400 to-primary-600",
              animate && "transition-all duration-1000 ease-out"
            ),
          }}
        />
        
        {animate && progress > 0 && (
          <motion.div
            className="absolute inset-0 h-full rounded-full opacity-30"
            initial={{ width: "0%" }}
            animate={{ width: `${progress}%` }}
            transition={{ 
              duration: 1.5, 
              ease: "easeOut",
              repeat: Infinity,
              repeatType: "reverse",
              repeatDelay: 3
            }}
          >
            <div className="h-full rounded-full bg-primary-400 animate-xp-pulse" />
          </motion.div>
        )}
      </div>

      {showDetails && (
        <motion.div
          initial={animate ? { opacity: 0, y: 10 } : undefined}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
          className="flex justify-between text-xs text-default-500"
        >
          <span>{formatXP(xpToNextLevel)} XP to level {currentLevel + 1}</span>
          <span>{progress.toFixed(1)}% complete</span>
        </motion.div>
      )}
    </div>
  )
}
</file>

<file path="src/components/gamification/XPNotification.tsx">
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { Card } from '@heroui/react'
import { cn } from '@/lib/utils'

interface XPNotificationProps {
  amount: number
  source: string
  visible: boolean
  onComplete?: () => void
  className?: string
}

export default function XPNotification({
  amount,
  source,
  visible,
  onComplete,
  className
}: XPNotificationProps) {
  return (
    <AnimatePresence>
      {visible && (
        <motion.div
          initial={{ opacity: 0, y: 50, scale: 0.8 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: -20, scale: 0.9 }}
          transition={{ 
            type: "spring", 
            stiffness: 400, 
            damping: 25 
          }}
          onAnimationComplete={onComplete}
          className={cn(
            "fixed bottom-4 right-4 z-50",
            className
          )}
        >
          <Card className="bg-gradient-to-r from-primary-500 to-primary-600 text-white p-4 shadow-xl">
            <div className="flex items-center gap-3">
              <motion.div
                animate={{
                  rotate: [0, 10, -10, 10, 0],
                  scale: [1, 1.2, 1.1, 1.2, 1]
                }}
                transition={{ 
                  duration: 1,
                  repeat: 2,
                  repeatType: "loop"
                }}
                className="text-3xl"
              >
                ⚡
              </motion.div>
              
              <div>
                <motion.div
                  key={amount}
                  initial={{ scale: 0.5 }}
                  animate={{ scale: 1 }}
                  className="text-2xl font-bold"
                >
                  +{amount} XP
                </motion.div>
                <div className="text-sm opacity-90">
                  {source}
                </div>
              </div>
            </div>
          </Card>
        </motion.div>
      )}
    </AnimatePresence>
  )
}
</file>

<file path="src/lib/supabase/client.ts">
import { createBrowserClient } from '@supabase/ssr'
import type { Database } from '@/types/database'

export function createClient() {
  return createBrowserClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
</file>

<file path="src/lib/supabase/middleware.ts">
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value }) =>
            request.cookies.set(name, value)
          )
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // This will refresh session if expired - required for Server Components
  await supabase.auth.getUser()

  return supabaseResponse
}
</file>

<file path="src/lib/supabase/server.ts">
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import type { Database } from '@/types/database'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
</file>

<file path="src/lib/gamification-utils.ts">
import { Rarity, Achievement } from '@/types/gamification'

export const RARITY_WEIGHTS: Record<Rarity, number> = {
  common: 50,
  uncommon: 30,
  rare: 15,
  epic: 4,
  legendary: 1,
}

export const RARITY_COLORS: Record<Rarity, string> = {
  common: '#9CA3AF',
  uncommon: '#22C55E',
  rare: '#3B82F6',
  epic: '#A855F7',
  legendary: '#F59E0B',
}

export const RARITY_XP_MULTIPLIER: Record<Rarity, number> = {
  common: 1,
  uncommon: 1.5,
  rare: 2,
  epic: 3,
  legendary: 5,
}

export function calculateLootRarity(): Rarity {
  const totalWeight = Object.values(RARITY_WEIGHTS).reduce((a, b) => a + b, 0)
  let random = Math.random() * totalWeight
  
  for (const [rarity, weight] of Object.entries(RARITY_WEIGHTS)) {
    random -= weight
    if (random <= 0) {
      return rarity as Rarity
    }
  }
  
  return 'common'
}

export function calculateAchievementProgress(
  current: number,
  target: number
): number {
  return Math.min((current / target) * 100, 100)
}

export function sortAchievementsByRarity(
  achievements: Achievement[]
): Achievement[] {
  const rarityOrder: Rarity[] = ['legendary', 'epic', 'rare', 'uncommon', 'common']
  return achievements.sort((a, b) => {
    return rarityOrder.indexOf(a.rarity) - rarityOrder.indexOf(b.rarity)
  })
}

export function getNextMilestoneXP(currentXP: number): number {
  const milestones = [100, 500, 1000, 5000, 10000, 25000, 50000, 100000]
  return milestones.find(m => m > currentXP) || currentXP + 10000
}

export function calculateDailyBonusXP(consecutiveDays: number): number {
  const baseBonus = 50
  const streakMultiplier = Math.min(consecutiveDays * 0.1, 2)
  return Math.floor(baseBonus * (1 + streakMultiplier))
}

export function getActivityXPReward(activity: string): number {
  const rewards: Record<string, number> = {
    'complete_lesson': 50,
    'pass_quiz': 100,
    'perfect_quiz': 150,
    'complete_module': 200,
    'complete_course': 500,
    'help_peer': 25,
    'daily_login': 10,
    'weekly_streak': 100,
    'monthly_streak': 500,
  }
  
  return rewards[activity] || 0
}

export function formatTimeAgo(date: Date): string {
  const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000)
  
  const intervals = [
    { label: 'year', seconds: 31536000 },
    { label: 'month', seconds: 2592000 },
    { label: 'week', seconds: 604800 },
    { label: 'day', seconds: 86400 },
    { label: 'hour', seconds: 3600 },
    { label: 'minute', seconds: 60 },
    { label: 'second', seconds: 1 },
  ]
  
  for (const interval of intervals) {
    const count = Math.floor(seconds / interval.seconds)
    if (count > 0) {
      return `${count} ${interval.label}${count !== 1 ? 's' : ''} ago`
    }
  }
  
  return 'just now'
}
</file>

<file path="src/lib/gamification.ts">
export function calculateLevel(totalXP: number): number {
  // Level calculation: Each level requires progressively more XP
  // Level 1: 0-100 XP
  // Level 2: 100-300 XP (+200)
  // Level 3: 300-600 XP (+300)
  // And so on...
  let level = 1
  let xpForCurrentLevel = 0
  let xpRequiredForNext = 100

  while (totalXP >= xpForCurrentLevel + xpRequiredForNext) {
    xpForCurrentLevel += xpRequiredForNext
    level++
    xpRequiredForNext = level * 100
  }

  return level
}

export function getXPForLevel(level: number): { min: number; max: number } {
  if (level === 1) return { min: 0, max: 100 }
  
  let min = 0
  for (let i = 1; i < level; i++) {
    min += i * 100
  }
  
  const max = min + level * 100
  return { min, max }
}

export function getCurrentLevelProgress(totalXP: number): {
  level: number
  currentLevelXP: number
  requiredXP: number
  percentage: number
} {
  const level = calculateLevel(totalXP)
  const { min, max } = getXPForLevel(level)
  const currentLevelXP = totalXP - min
  const requiredXP = max - min
  const percentage = (currentLevelXP / requiredXP) * 100

  return {
    level,
    currentLevelXP,
    requiredXP,
    percentage: Math.min(100, Math.max(0, percentage))
  }
}

export function formatXP(xp: number): string {
  if (xp >= 1000000) {
    return `${(xp / 1000000).toFixed(1)}M`
  } else if (xp >= 1000) {
    return `${(xp / 1000).toFixed(1)}K`
  }
  return xp.toString()
}

export function getLevelTitle(level: number): string {
  const titles: Record<number, string> = {
    1: 'Medical Novice',
    5: 'Medical Student',
    10: 'Clinical Scholar',
    15: 'Resident Physician',
    20: 'Medical Professional',
    25: 'Clinical Expert',
    30: 'Medical Specialist',
    40: 'Distinguished Physician',
    50: 'Master of Medicine',
    75: 'Medical Authority',
    100: 'Grand Master of Medicine'
  }

  // Find the highest title the user has achieved
  const sortedLevels = Object.keys(titles)
    .map(Number)
    .sort((a, b) => b - a)

  for (const titleLevel of sortedLevels) {
    if (level >= titleLevel) {
      return titles[titleLevel]
    }
  }

  return 'Medical Novice'
}

export function getStreakBonus(streak: number): number {
  // Streak bonuses
  if (streak >= 30) return 2.0  // 100% bonus
  if (streak >= 14) return 1.5  // 50% bonus
  if (streak >= 7) return 1.25  // 25% bonus
  if (streak >= 3) return 1.1   // 10% bonus
  return 1.0
}

export function getLevelPerks(level: number): string[] {
  const perks: string[] = []
  
  if (level >= 5) perks.push('Custom Avatar Frame')
  if (level >= 10) perks.push('Priority Support')
  if (level >= 15) perks.push('Exclusive Badges')
  if (level >= 20) perks.push('Early Access to New Courses')
  if (level >= 25) perks.push('Mentorship Opportunities')
  if (level >= 30) perks.push('Custom Study Plans')
  if (level >= 40) perks.push('VIP Community Access')
  if (level >= 50) perks.push('Course Creation Tools')
  
  return perks
}

export interface AchievementProgress {
  id: string
  current: number
  required: number
  percentage: number
}

export function checkAchievementProgress(
  type: string,
  current: number
): AchievementProgress[] {
  const achievements: Record<string, { required: number; id: string }[]> = {
    courses_completed: [
      { required: 1, id: 'first_course' },
      { required: 5, id: 'course_explorer' },
      { required: 10, id: 'dedicated_learner' },
      { required: 25, id: 'course_master' },
    ],
    perfect_quizzes: [
      { required: 1, id: 'perfect_score' },
      { required: 10, id: 'quiz_ace' },
      { required: 50, id: 'perfection_streak' },
    ],
    daily_streak: [
      { required: 3, id: 'getting_started' },
      { required: 7, id: 'week_warrior' },
      { required: 30, id: 'monthly_dedication' },
      { required: 100, id: 'century_streak' },
    ],
  }

  const relevantAchievements = achievements[type] || []
  
  return relevantAchievements.map(achievement => ({
    id: achievement.id,
    current,
    required: achievement.required,
    percentage: Math.min(100, (current / achievement.required) * 100)
  }))
}
</file>

<file path="src/lib/prisma.ts">
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatNumber(num: number): string {
  return new Intl.NumberFormat('en-US').format(num)
}

export function formatPercentage(value: number, decimals = 0): string {
  return `${value.toFixed(decimals)}%`
}

export function generateId(): string {
  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout | null = null
  
  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean = false
  
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args)
      inThrottle = true
      setTimeout(() => (inThrottle = false), limit)
    }
  }
}

export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) return text
  return `${text.substring(0, maxLength)}...`
}

export function capitalize(text: string): string {
  return text.charAt(0).toUpperCase() + text.slice(1)
}

export function pluralize(count: number, singular: string, plural?: string): string {
  return count === 1 ? singular : (plural || `${singular}s`)
}
</file>

<file path="src/lib/xp-utils.ts">
import { LevelData } from '@/types/gamification'

export const LEVEL_TITLES: Record<number, string> = {
  1: 'Medical Novice',
  5: 'First-Year Student',
  10: 'Clinical Observer',
  15: 'Junior Practitioner',
  20: 'Medical Scholar',
  25: 'Resident Physician',
  30: 'Clinical Expert',
  35: 'Senior Physician',
  40: 'Medical Specialist',
  45: 'Master Physician',
  50: 'Medical Professor',
  60: 'Distinguished Expert',
  70: 'Medical Authority',
  80: 'Legendary Healer',
  90: 'Medical Sage',
  100: 'Grand Master of Medicine',
}

export function calculateLevel(totalXP: number): number {
  return Math.floor(Math.sqrt(totalXP / 100)) + 1
}

export function calculateXPToNextLevel(totalXP: number): number {
  const currentLevel = calculateLevel(totalXP)
  const nextLevelXP = Math.pow(currentLevel, 2) * 100
  return nextLevelXP - totalXP
}

export function calculateTotalXPForLevel(level: number): number {
  return Math.pow(level - 1, 2) * 100
}

export function getLevelProgress(totalXP: number): number {
  const currentLevel = calculateLevel(totalXP)
  const currentLevelMinXP = calculateTotalXPForLevel(currentLevel)
  const nextLevelMinXP = calculateTotalXPForLevel(currentLevel + 1)
  const levelXPRange = nextLevelMinXP - currentLevelMinXP
  const xpIntoLevel = totalXP - currentLevelMinXP
  
  return (xpIntoLevel / levelXPRange) * 100
}

export function getLevelTitle(level: number): string {
  const titles = Object.entries(LEVEL_TITLES)
    .map(([lvl, title]) => ({ level: parseInt(lvl), title }))
    .sort((a, b) => b.level - a.level)
  
  const matchedTitle = titles.find(t => level >= t.level)
  return matchedTitle?.title || 'Medical Student'
}

export function getLevelData(level: number): LevelData {
  return {
    level,
    title: getLevelTitle(level),
    minXP: calculateTotalXPForLevel(level),
    maxXP: calculateTotalXPForLevel(level + 1),
    perks: getLevelPerks(level),
  }
}

export function getLevelPerks(level: number): string[] {
  const perks: string[] = []
  
  if (level >= 5) perks.push('Access to advanced courses')
  if (level >= 10) perks.push('Peer review privileges')
  if (level >= 15) perks.push('Create study groups')
  if (level >= 20) perks.push('Mentor new students')
  if (level >= 25) perks.push('Custom avatar frames')
  if (level >= 30) perks.push('Priority support')
  if (level >= 40) perks.push('Course creation tools')
  if (level >= 50) perks.push('Platform moderator')
  
  return perks
}

export function calculateStreakBonus(streakDays: number): number {
  if (streakDays < 3) return 0
  if (streakDays < 7) return 10
  if (streakDays < 14) return 25
  if (streakDays < 30) return 50
  if (streakDays < 60) return 75
  return 100
}

export function formatXP(xp: number): string {
  if (xp >= 1000000) {
    return `${(xp / 1000000).toFixed(1)}M`
  }
  if (xp >= 1000) {
    return `${(xp / 1000).toFixed(1)}K`
  }
  return xp.toString()
}
</file>

<file path="src/types/gamification.ts">
export type UserRole = 'student' | 'instructor' | 'admin'

export type Rarity = 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary'

export type LootType = 'cosmetic' | 'functional' | 'consumable'

export interface User {
  id: string
  email: string
  name: string
  role: UserRole
  createdAt: Date
  updatedAt: Date
}

export interface UserProfile {
  userId: string
  avatar: string
  bio: string
  specialty: string
  title: string
  badges: string[]
}

export interface UserXP {
  userId: string
  totalXP: number
  currentLevel: number
  xpToNextLevel: number
  weeklyXP: number
  monthlyXP: number
  lastXPGain: Date
}

export interface Achievement {
  id: string
  name: string
  description: string
  icon: string
  rarity: Rarity
  xpReward: number
  category: string
  unlockCondition: string
  progress?: number
  maxProgress?: number
}

export interface UserAchievement {
  userId: string
  achievementId: string
  unlockedAt: Date
  claimed: boolean
}

export interface LootItem {
  id: string
  name: string
  description: string
  type: LootType
  rarity: Rarity
  icon: string
  effect?: string
  value?: number
}

export interface UserInventory {
  userId: string
  itemId: string
  quantity: number
  acquiredAt: Date
}

export interface XPTransaction {
  id: string
  userId: string
  amount: number
  source: string
  description: string
  timestamp: Date
}

export interface Leaderboard {
  period: 'daily' | 'weekly' | 'monthly' | 'all-time'
  entries: LeaderboardEntry[]
  lastUpdated: Date
}

export interface LeaderboardEntry {
  rank: number
  userId: string
  userName: string
  userAvatar: string
  xp: number
  level: number
  change: number
}

export interface LevelData {
  level: number
  title: string
  minXP: number
  maxXP: number
  perks: string[]
}

export interface Streak {
  userId: string
  currentStreak: number
  longestStreak: number
  lastActivityDate: Date
}
</file>

<file path="src/types/learning.ts">
export type QuestionType = 'multiple-choice' | 'true-false' | 'case-study' | 'drag-drop'

export type CourseCategory = 'anatomy' | 'physiology' | 'pathology' | 'pharmacology' | 'clinical'

export type ContentType = 'video' | 'text' | 'interactive' | '3d-model' | 'simulation'

export interface Course {
  id: string
  title: string
  description: string
  category: CourseCategory
  thumbnail: string
  duration: number
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  xpReward: number
  createdBy: string
  createdAt: Date
  updatedAt: Date
}

export interface Module {
  id: string
  courseId: string
  title: string
  description: string
  order: number
  estimatedTime: number
  xpReward: number
}

export interface Lesson {
  id: string
  moduleId: string
  title: string
  description: string
  content: LessonContent[]
  order: number
  xpReward: number
  duration: number
}

export interface LessonContent {
  id: string
  type: ContentType
  content: string
  metadata?: Record<string, any>
  order: number
}

export interface Quiz {
  id: string
  lessonId: string
  title: string
  description: string
  passingScore: number
  timeLimit?: number
  xpReward: number
  attempts: number
}

export interface QuizQuestion {
  id: string
  quizId: string
  question: string
  type: QuestionType
  options?: string[]
  correctAnswer: string | string[]
  explanation: string
  points: number
  order: number
  media?: string
}

export interface UserProgress {
  id: string
  userId: string
  courseId?: string
  moduleId?: string
  lessonId?: string
  completed: boolean
  completedAt?: Date
  score?: number
  timeSpent: number
  lastAccessedAt: Date
}

export interface QuizAttempt {
  id: string
  userId: string
  quizId: string
  score: number
  answers: QuizAnswer[]
  startedAt: Date
  completedAt: Date
  passed: boolean
}

export interface QuizAnswer {
  questionId: string
  answer: string | string[]
  correct: boolean
  timeSpent: number
}
</file>

<file path="src/middleware.ts">
import { type NextRequest } from 'next/server'
import { updateSession } from '@/lib/supabase/middleware'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
</file>

<file path="supabase/migrations/001_initial_schema.sql">
-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create custom types/enums
CREATE TYPE user_role AS ENUM ('STUDENT', 'INSTRUCTOR', 'ADMIN');
CREATE TYPE rarity AS ENUM ('COMMON', 'UNCOMMON', 'RARE', 'EPIC', 'LEGENDARY');
CREATE TYPE achievement_category AS ENUM ('LEARNING', 'SOCIAL', 'CONSISTENCY', 'MASTERY', 'SPECIAL');
CREATE TYPE loot_item_type AS ENUM ('AVATAR_FRAME', 'BADGE', 'TITLE', 'XP_BOOST', 'THEME');
CREATE TYPE course_category AS ENUM ('ANATOMY', 'PHYSIOLOGY', 'PATHOLOGY', 'PHARMACOLOGY', 'CLINICAL_SKILLS', 'MEDICAL_ETHICS');
CREATE TYPE difficulty AS ENUM ('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT');
CREATE TYPE question_type AS ENUM ('MULTIPLE_CHOICE', 'TRUE_FALSE', 'OPEN_ENDED', 'CASE_STUDY');
CREATE TYPE group_role AS ENUM ('OWNER', 'MODERATOR', 'MEMBER');
CREATE TYPE mentorship_status AS ENUM ('PENDING', 'ACTIVE', 'COMPLETED', 'CANCELLED');
CREATE TYPE notification_type AS ENUM ('ACHIEVEMENT_UNLOCKED', 'LEVEL_UP', 'QUIZ_COMPLETED', 'COURSE_COMPLETED', 'STUDY_GROUP_INVITE', 'MENTORSHIP_REQUEST', 'SYSTEM');

-- Users table (extends Supabase auth.users)
CREATE TABLE public.users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    email TEXT UNIQUE NOT NULL,
    username TEXT UNIQUE NOT NULL,
    role user_role DEFAULT 'STUDENT' NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- User profiles
CREATE TABLE public.user_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    display_name TEXT NOT NULL,
    bio TEXT,
    avatar_url TEXT,
    medical_school TEXT,
    year_of_study INTEGER,
    specialization TEXT,
    location TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- User progress (gamification)
CREATE TABLE public.user_progress (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID UNIQUE NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    total_xp INTEGER DEFAULT 0 NOT NULL,
    current_level INTEGER DEFAULT 1 NOT NULL,
    current_level_xp INTEGER DEFAULT 0 NOT NULL,
    next_level_xp INTEGER DEFAULT 100 NOT NULL,
    daily_streak INTEGER DEFAULT 0 NOT NULL,
    longest_streak INTEGER DEFAULT 0 NOT NULL,
    last_activity_date TIMESTAMPTZ,
    weekly_xp INTEGER DEFAULT 0 NOT NULL,
    monthly_xp INTEGER DEFAULT 0 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Achievements
CREATE TABLE public.achievements (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    code TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    category achievement_category NOT NULL,
    rarity rarity NOT NULL,
    icon_url TEXT,
    xp_reward INTEGER DEFAULT 0 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- User achievements (junction table)
CREATE TABLE public.user_achievements (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    achievement_id UUID NOT NULL REFERENCES public.achievements(id),
    unlocked_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(user_id, achievement_id)
);

-- Loot items
CREATE TABLE public.loot_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    code TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    type loot_item_type NOT NULL,
    rarity rarity NOT NULL,
    image_url TEXT,
    effect JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- User inventory
CREATE TABLE public.inventory_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    loot_item_id UUID NOT NULL REFERENCES public.loot_items(id),
    quantity INTEGER DEFAULT 1 NOT NULL,
    equipped BOOLEAN DEFAULT FALSE NOT NULL,
    obtained_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(user_id, loot_item_id)
);

-- Courses
CREATE TABLE public.courses (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    code TEXT UNIQUE NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    category course_category NOT NULL,
    difficulty difficulty NOT NULL,
    image_url TEXT,
    total_xp INTEGER DEFAULT 0 NOT NULL,
    duration INTEGER NOT NULL, -- in hours
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Course prerequisites (self-referencing many-to-many)
CREATE TABLE public.course_prerequisites (
    course_id UUID NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
    prerequisite_id UUID NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
    PRIMARY KEY (course_id, prerequisite_id)
);

-- Modules
CREATE TABLE public.modules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    course_id UUID NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
    order_num INTEGER NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Lessons
CREATE TABLE public.lessons (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    module_id UUID NOT NULL REFERENCES public.modules(id) ON DELETE CASCADE,
    order_num INTEGER NOT NULL,
    title TEXT NOT NULL,
    content JSONB NOT NULL, -- Rich content
    video_url TEXT,
    duration INTEGER NOT NULL, -- in minutes
    xp_reward INTEGER DEFAULT 50 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Quizzes
CREATE TABLE public.quizzes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    lesson_id UUID REFERENCES public.lessons(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    time_limit INTEGER, -- in minutes
    xp_reward INTEGER DEFAULT 100 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Questions
CREATE TABLE public.questions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    quiz_id UUID NOT NULL REFERENCES public.quizzes(id) ON DELETE CASCADE,
    order_num INTEGER NOT NULL,
    type question_type NOT NULL,
    text TEXT NOT NULL,
    explanation TEXT,
    image_url TEXT,
    points INTEGER DEFAULT 10 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Answers
CREATE TABLE public.answers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    question_id UUID NOT NULL REFERENCES public.questions(id) ON DELETE CASCADE,
    text TEXT NOT NULL,
    is_correct BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Enrollments
CREATE TABLE public.enrollments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    course_id UUID NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
    progress INTEGER DEFAULT 0 NOT NULL, -- percentage
    completed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(user_id, course_id)
);

-- Lesson progress
CREATE TABLE public.lesson_progress (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    enrollment_id UUID NOT NULL REFERENCES public.enrollments(id) ON DELETE CASCADE,
    lesson_id UUID NOT NULL REFERENCES public.lessons(id),
    completed BOOLEAN DEFAULT FALSE NOT NULL,
    xp_earned INTEGER DEFAULT 0 NOT NULL,
    completed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(enrollment_id, lesson_id)
);

-- Quiz attempts
CREATE TABLE public.quiz_attempts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    quiz_id UUID NOT NULL REFERENCES public.quizzes(id),
    score INTEGER NOT NULL,
    total_points INTEGER NOT NULL,
    xp_earned INTEGER DEFAULT 0 NOT NULL,
    time_spent INTEGER, -- in seconds
    passed BOOLEAN DEFAULT FALSE NOT NULL,
    completed_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- User answers
CREATE TABLE public.user_answers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    attempt_id UUID NOT NULL REFERENCES public.quiz_attempts(id) ON DELETE CASCADE,
    question_id UUID NOT NULL REFERENCES public.questions(id),
    answer_id UUID REFERENCES public.answers(id),
    text_answer TEXT, -- For open-ended questions
    is_correct BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(attempt_id, question_id)
);

-- Study groups
CREATE TABLE public.study_groups (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    description TEXT,
    image_url TEXT,
    is_private BOOLEAN DEFAULT FALSE NOT NULL,
    max_members INTEGER DEFAULT 20 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Study group members
CREATE TABLE public.study_group_members (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    group_id UUID NOT NULL REFERENCES public.study_groups(id) ON DELETE CASCADE,
    role group_role DEFAULT 'MEMBER' NOT NULL,
    joined_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(user_id, group_id)
);

-- Forum categories
CREATE TABLE public.forum_categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    description TEXT,
    slug TEXT UNIQUE NOT NULL,
    order_num INTEGER DEFAULT 0 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Forum posts
CREATE TABLE public.forum_posts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    author_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    category_id UUID NOT NULL REFERENCES public.forum_categories(id),
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    is_pinned BOOLEAN DEFAULT FALSE NOT NULL,
    view_count INTEGER DEFAULT 0 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Forum comments
CREATE TABLE public.forum_comments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    post_id UUID NOT NULL REFERENCES public.forum_posts(id) ON DELETE CASCADE,
    author_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    upvotes INTEGER DEFAULT 0 NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Mentorships
CREATE TABLE public.mentorships (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    mentor_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    mentee_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    status mentorship_status DEFAULT 'PENDING' NOT NULL,
    message TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(mentor_id, mentee_id)
);

-- Notifications
CREATE TABLE public.notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    type notification_type NOT NULL,
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    data JSONB,
    read BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Create indexes for better performance
CREATE INDEX idx_modules_course_order ON public.modules(course_id, order_num);
CREATE INDEX idx_lessons_module_order ON public.lessons(module_id, order_num);
CREATE INDEX idx_questions_quiz_order ON public.questions(quiz_id, order_num);
CREATE INDEX idx_quiz_attempts_user_quiz ON public.quiz_attempts(user_id, quiz_id);
CREATE INDEX idx_notifications_user_read ON public.notifications(user_id, read);
CREATE INDEX idx_forum_posts_category ON public.forum_posts(category_id);

-- Enable Row Level Security on all tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.loot_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inventory_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.course_prerequisites ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.modules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lessons ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quizzes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.answers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.enrollments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lesson_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.quiz_attempts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_answers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.study_groups ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.study_group_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.forum_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.forum_posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.forum_comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.mentorships ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply updated_at triggers
CREATE TRIGGER set_timestamp_users BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_user_profiles BEFORE UPDATE ON public.user_profiles FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_user_progress BEFORE UPDATE ON public.user_progress FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_achievements BEFORE UPDATE ON public.achievements FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_loot_items BEFORE UPDATE ON public.loot_items FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_courses BEFORE UPDATE ON public.courses FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_modules BEFORE UPDATE ON public.modules FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_lessons BEFORE UPDATE ON public.lessons FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_quizzes BEFORE UPDATE ON public.quizzes FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_questions BEFORE UPDATE ON public.questions FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_answers BEFORE UPDATE ON public.answers FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_enrollments BEFORE UPDATE ON public.enrollments FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_lesson_progress BEFORE UPDATE ON public.lesson_progress FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_study_groups BEFORE UPDATE ON public.study_groups FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_forum_categories BEFORE UPDATE ON public.forum_categories FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_forum_posts BEFORE UPDATE ON public.forum_posts FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE TRIGGER set_timestamp_forum_comments BEFORE UPDATE ON public.forum_comments FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
</file>

<file path="supabase/migrations/002_rls_policies.sql">
-- Row Level Security Policies for BeeMed

-- Users table policies
CREATE POLICY "Users can view their own profile" ON public.users
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile" ON public.users
    FOR UPDATE USING (auth.uid() = id);

-- User profiles policies
CREATE POLICY "Public profiles are viewable by everyone" ON public.user_profiles
    FOR SELECT USING (true);

CREATE POLICY "Users can update their own profile" ON public.user_profiles
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own profile" ON public.user_profiles
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- User progress policies
CREATE POLICY "Users can view their own progress" ON public.user_progress
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "System can update user progress" ON public.user_progress
    FOR UPDATE USING (auth.uid() = user_id);

-- Achievements policies (public read)
CREATE POLICY "Achievements are viewable by everyone" ON public.achievements
    FOR SELECT USING (true);

-- User achievements policies
CREATE POLICY "Users can view all user achievements" ON public.user_achievements
    FOR SELECT USING (true);

CREATE POLICY "System can insert user achievements" ON public.user_achievements
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Loot items policies (public read)
CREATE POLICY "Loot items are viewable by everyone" ON public.loot_items
    FOR SELECT USING (true);

-- Inventory items policies
CREATE POLICY "Users can view their own inventory" ON public.inventory_items
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own inventory" ON public.inventory_items
    FOR UPDATE USING (auth.uid() = user_id);

-- Courses policies (public read)
CREATE POLICY "Courses are viewable by everyone" ON public.courses
    FOR SELECT USING (true);

-- Course prerequisites policies (public read)
CREATE POLICY "Course prerequisites are viewable by everyone" ON public.course_prerequisites
    FOR SELECT USING (true);

-- Modules policies (public read)
CREATE POLICY "Modules are viewable by everyone" ON public.modules
    FOR SELECT USING (true);

-- Lessons policies
CREATE POLICY "Lessons are viewable by enrolled users" ON public.lessons
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.enrollments e
            JOIN public.modules m ON m.course_id = e.course_id
            WHERE e.user_id = auth.uid() 
            AND m.id = lessons.module_id
        )
    );

-- Quizzes policies
CREATE POLICY "Quizzes are viewable by enrolled users" ON public.quizzes
    FOR SELECT USING (
        lesson_id IS NULL OR
        EXISTS (
            SELECT 1 FROM public.enrollments e
            JOIN public.modules m ON m.course_id = e.course_id
            JOIN public.lessons l ON l.module_id = m.id
            WHERE e.user_id = auth.uid() 
            AND l.id = quizzes.lesson_id
        )
    );

-- Questions policies
CREATE POLICY "Questions are viewable during quiz attempts" ON public.questions
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.quiz_attempts qa
            WHERE qa.user_id = auth.uid() 
            AND qa.quiz_id = questions.quiz_id
        )
    );

-- Answers policies
CREATE POLICY "Answers are viewable during quiz attempts" ON public.answers
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.quiz_attempts qa
            JOIN public.questions q ON q.quiz_id = qa.quiz_id
            WHERE qa.user_id = auth.uid() 
            AND q.id = answers.question_id
        )
    );

-- Enrollments policies
CREATE POLICY "Users can view their own enrollments" ON public.enrollments
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can enroll themselves" ON public.enrollments
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Lesson progress policies
CREATE POLICY "Users can view their own lesson progress" ON public.lesson_progress
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.enrollments e
            WHERE e.id = lesson_progress.enrollment_id
            AND e.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can update their own lesson progress" ON public.lesson_progress
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM public.enrollments e
            WHERE e.id = lesson_progress.enrollment_id
            AND e.user_id = auth.uid()
        )
    );

-- Quiz attempts policies
CREATE POLICY "Users can view their own quiz attempts" ON public.quiz_attempts
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own quiz attempts" ON public.quiz_attempts
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- User answers policies
CREATE POLICY "Users can view their own answers" ON public.user_answers
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.quiz_attempts qa
            WHERE qa.id = user_answers.attempt_id
            AND qa.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can insert their own answers" ON public.user_answers
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.quiz_attempts qa
            WHERE qa.id = user_answers.attempt_id
            AND qa.user_id = auth.uid()
        )
    );

-- Study groups policies
CREATE POLICY "Public study groups are viewable by everyone" ON public.study_groups
    FOR SELECT USING (
        NOT is_private OR
        EXISTS (
            SELECT 1 FROM public.study_group_members sgm
            WHERE sgm.group_id = study_groups.id
            AND sgm.user_id = auth.uid()
        )
    );

CREATE POLICY "Group owners can update their groups" ON public.study_groups
    FOR UPDATE USING (
        EXISTS (
            SELECT 1 FROM public.study_group_members sgm
            WHERE sgm.group_id = study_groups.id
            AND sgm.user_id = auth.uid()
            AND sgm.role = 'OWNER'
        )
    );

-- Study group members policies
CREATE POLICY "Group members are viewable by group members" ON public.study_group_members
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.study_group_members sgm
            WHERE sgm.group_id = study_group_members.group_id
            AND sgm.user_id = auth.uid()
        )
    );

CREATE POLICY "Users can join groups" ON public.study_group_members
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Forum categories policies (public read)
CREATE POLICY "Forum categories are viewable by everyone" ON public.forum_categories
    FOR SELECT USING (true);

-- Forum posts policies
CREATE POLICY "Forum posts are viewable by everyone" ON public.forum_posts
    FOR SELECT USING (true);

CREATE POLICY "Authenticated users can create posts" ON public.forum_posts
    FOR INSERT WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Users can update their own posts" ON public.forum_posts
    FOR UPDATE USING (auth.uid() = author_id);

CREATE POLICY "Users can delete their own posts" ON public.forum_posts
    FOR DELETE USING (auth.uid() = author_id);

-- Forum comments policies
CREATE POLICY "Forum comments are viewable by everyone" ON public.forum_comments
    FOR SELECT USING (true);

CREATE POLICY "Authenticated users can create comments" ON public.forum_comments
    FOR INSERT WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Users can update their own comments" ON public.forum_comments
    FOR UPDATE USING (auth.uid() = author_id);

CREATE POLICY "Users can delete their own comments" ON public.forum_comments
    FOR DELETE USING (auth.uid() = author_id);

-- Mentorships policies
CREATE POLICY "Users can view their own mentorships" ON public.mentorships
    FOR SELECT USING (auth.uid() = mentor_id OR auth.uid() = mentee_id);

CREATE POLICY "Users can create mentorship requests" ON public.mentorships
    FOR INSERT WITH CHECK (auth.uid() = mentee_id);

CREATE POLICY "Mentors can update mentorship status" ON public.mentorships
    FOR UPDATE USING (auth.uid() = mentor_id);

-- Notifications policies
CREATE POLICY "Users can view their own notifications" ON public.notifications
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own notifications" ON public.notifications
    FOR UPDATE USING (auth.uid() = user_id);

-- Admin policies (for users with ADMIN or INSTRUCTOR role)
CREATE POLICY "Admins can manage courses" ON public.courses
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role IN ('ADMIN', 'INSTRUCTOR')
        )
    );

CREATE POLICY "Admins can manage modules" ON public.modules
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role IN ('ADMIN', 'INSTRUCTOR')
        )
    );

CREATE POLICY "Admins can manage lessons" ON public.lessons
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role IN ('ADMIN', 'INSTRUCTOR')
        )
    );

CREATE POLICY "Admins can manage quizzes" ON public.quizzes
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role IN ('ADMIN', 'INSTRUCTOR')
        )
    );

CREATE POLICY "Admins can manage questions" ON public.questions
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role IN ('ADMIN', 'INSTRUCTOR')
        )
    );

CREATE POLICY "Admins can manage answers" ON public.answers
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role IN ('ADMIN', 'INSTRUCTOR')
        )
    );

CREATE POLICY "Admins can manage achievements" ON public.achievements
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role = 'ADMIN'
        )
    );

CREATE POLICY "Admins can manage loot items" ON public.loot_items
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users
            WHERE id = auth.uid()
            AND role = 'ADMIN'
        )
    );
</file>

<file path="supabase/migrations/003_auth_triggers.sql">
-- Function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert into public.users
    INSERT INTO public.users (id, email, username, role)
    VALUES (
        NEW.id,
        NEW.email,
        COALESCE(NEW.raw_user_meta_data->>'username', SPLIT_PART(NEW.email, '@', 1)),
        COALESCE((NEW.raw_user_meta_data->>'role')::user_role, 'STUDENT')
    );

    -- Create user profile
    INSERT INTO public.user_profiles (user_id, display_name)
    VALUES (
        NEW.id,
        COALESCE(NEW.raw_user_meta_data->>'display_name', SPLIT_PART(NEW.email, '@', 1))
    );

    -- Initialize user progress
    INSERT INTO public.user_progress (user_id)
    VALUES (NEW.id);

    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to automatically create user records
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Function to handle user deletion
CREATE OR REPLACE FUNCTION public.handle_user_delete()
RETURNS TRIGGER AS $$
BEGIN
    -- All related records will be deleted automatically due to CASCADE
    -- This function is here for any additional cleanup if needed
    RETURN OLD;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger for user deletion
CREATE TRIGGER on_auth_user_deleted
    BEFORE DELETE ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_user_delete();
</file>

<file path=".dockerignore">
# Dependencies
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Next.js build output
.next
out
build
dist

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE and editor files
.vscode
.idea
*.swp
*.swo
*.swn
.DS_Store

# Test coverage
coverage
.nyc_output

# Misc
.git
.gitignore
README.md
.eslintcache
.npm
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# Docker
Dockerfile
docker-compose.yml
.dockerignore
</file>

<file path="architecture.md">
# BeeMed Platform Architecture

## System Architecture Overview

```
┌─────────────────────────────────────────────────────────────────┐
│                        Client Layer                              │
├─────────────────────────────────────────────────────────────────┤
│  Next.js 15 App Router │ HeroUI Components │ Framer Motion      │
│  TypeScript           │ Tailwind CSS v4   │ PWA Support        │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                      Application Layer                           │
├─────────────────────────────────────────────────────────────────┤
│  API Routes          │ Server Actions     │ Middleware          │
│  Authentication      │ Authorization      │ Rate Limiting       │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                       Business Logic                             │
├─────────────────────────────────────────────────────────────────┤
│  Gamification Engine │ Learning Analytics │ Content Management  │
│  XP Calculator       │ Progress Tracking  │ Quiz Engine         │
└─────────────────────────────────────────────────────────────────┘
                                │
                                ▼
┌─────────────────────────────────────────────────────────────────┐
│                        Data Layer                                │
├─────────────────────────────────────────────────────────────────┤
│  PostgreSQL          │ Redis Cache        │ File Storage        │
│  Prisma ORM          │ Socket.io          │ CDN                 │
└─────────────────────────────────────────────────────────────────┘
```

## Core Modules

### 1. User Management Module
**Purpose**: Handle user registration, authentication, and profile management

**Components**:
- Authentication (NextAuth.js)
- User profiles with avatar customization
- Role-based access control (RBAC)
- Social connections

**Database Tables**:
```sql
- users (id, email, name, role, created_at)
- profiles (user_id, avatar, bio, specialty)
- user_connections (user_id, connection_id, status)
```

### 2. Gamification Module
**Purpose**: Manage XP, levels, achievements, and rewards

**Components**:
- XP calculation service
- Level progression system
- Achievement tracker
- Loot distribution engine
- Leaderboard service

**Database Tables**:
```sql
- user_xp (user_id, total_xp, current_level)
- achievements (id, name, description, xp_reward, rarity)
- user_achievements (user_id, achievement_id, earned_at)
- loot_items (id, name, type, rarity, icon)
- user_inventory (user_id, item_id, quantity)
```

### 3. Learning Content Module
**Purpose**: Deliver educational content and track progress

**Components**:
- Course management
- Lesson delivery
- Quiz engine
- Progress tracking
- Content recommendations

**Database Tables**:
```sql
- courses (id, title, description, category)
- modules (id, course_id, title, order)
- lessons (id, module_id, title, content, xp_reward)
- quizzes (id, lesson_id, title, passing_score)
- quiz_questions (id, quiz_id, question, type)
- user_progress (user_id, lesson_id, completed_at, score)
```

### 4. Social Learning Module
**Purpose**: Enable collaboration and peer learning

**Components**:
- Study groups
- Discussion forums
- Peer review system
- Mentorship matching

**Database Tables**:
```sql
- study_groups (id, name, description, creator_id)
- group_members (group_id, user_id, role)
- forum_posts (id, author_id, title, content)
- peer_reviews (id, submission_id, reviewer_id, feedback)
```

## API Architecture

### RESTful Endpoints
```
/api/auth/*           - Authentication endpoints
/api/users/*          - User management
/api/courses/*        - Course CRUD operations
/api/lessons/*        - Lesson content delivery
/api/quizzes/*        - Quiz management
/api/gamification/*   - XP, achievements, loot
/api/social/*         - Groups, forums, connections
/api/analytics/*      - Learning analytics
```

### Real-time Events (Socket.io)
```javascript
// Client events
'quiz:submit'         - Submit quiz answers
'group:join'          - Join study group
'achievement:claim'   - Claim achievement reward

// Server events
'xp:awarded'          - XP gained notification
'achievement:unlocked'- New achievement
'leaderboard:update'  - Leaderboard changes
'group:message'       - Group chat message
```

## State Management

### Client State (Zustand)
```typescript
// User Store
interface UserStore {
  user: User | null
  xp: UserXP
  achievements: Achievement[]
  inventory: LootItem[]
}

// Course Store
interface CourseStore {
  courses: Course[]
  currentCourse: Course | null
  progress: Progress[]
}

// UI Store
interface UIStore {
  theme: 'light' | 'dark'
  notifications: Notification[]
  modals: ModalState
}
```

### Server State
- Session management via NextAuth
- Cache strategy with Redis
- Real-time state via Socket.io

## Security Architecture

### Authentication Flow
1. User login via NextAuth providers
2. JWT token generation
3. Session storage in encrypted cookies
4. Token refresh on expiration

### Authorization
- Role-based permissions (Student, Instructor, Admin)
- Resource-level access control
- API rate limiting per user/IP

### Data Protection
- Input validation and sanitization
- SQL injection prevention via Prisma
- XSS protection with React
- CSRF tokens for state-changing operations

## Performance Optimization

### Caching Strategy
```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│   Browser   │────▶│    Redis    │────▶│  Database   │
│   Cache     │     │    Cache    │     │             │
└─────────────┘     └─────────────┘     └─────────────┘
```

- Browser: Service Worker caching
- Redis: Session data, leaderboards, hot data
- Database: Persistent storage with indexes

### Code Splitting
- Route-based splitting with Next.js
- Component lazy loading
- Dynamic imports for heavy libraries

### Asset Optimization
- Image optimization with Next.js Image
- Font subsetting
- CSS purging with Tailwind
- JavaScript minification

## Deployment Architecture

### Container Structure
```
┌─────────────────────────────────────┐
│         Load Balancer               │
└──────────────┬──────────────────────┘
               │
    ┌──────────┴──────────┐
    │                     │
┌───▼────┐           ┌───▼────┐
│ App    │           │ App    │
│ Node 1 │           │ Node 2 │
└───┬────┘           └───┬────┘
    │                     │
    └──────────┬──────────┘
               │
    ┌──────────▼──────────┐
    │    PostgreSQL       │
    │    (Primary)        │
    └─────────────────────┘
```

### Scaling Strategy
- Horizontal scaling for app nodes
- Database read replicas
- Redis cluster for caching
- CDN for static assets

## Monitoring & Analytics

### Application Monitoring
- Error tracking with Sentry
- Performance monitoring
- User behavior analytics
- API usage metrics

### Health Checks
```typescript
// Health check endpoints
GET /api/health          - Application health
GET /api/health/db       - Database connectivity
GET /api/health/redis    - Redis connectivity
GET /api/health/detailed - Full system status
```

### Logging Strategy
- Structured JSON logging
- Log levels: ERROR, WARN, INFO, DEBUG
- Centralized log aggregation
- Real-time alerting for critical errors

## Development Workflow

### Git Branch Strategy
```
main
├── develop
│   ├── feature/gamification-xp
│   ├── feature/quiz-engine
│   └── feature/social-groups
├── staging
└── hotfix/critical-bug
```

### CI/CD Pipeline
1. Code push to feature branch
2. Automated tests (unit, integration, e2e)
3. Code quality checks (ESLint, TypeScript)
4. Build verification
5. Deploy to staging
6. Manual QA approval
7. Merge to main
8. Deploy to production

### Testing Strategy
- Unit tests: Components, utilities
- Integration tests: API endpoints
- E2E tests: Critical user flows
- Performance tests: Load testing
- Security tests: Vulnerability scanning
</file>

<file path="build-cloud.sh">
#!/bin/bash

# BeeMed Docker Build Cloud Script
# This script builds and pushes Docker images using Docker Build Cloud

set -e

# Configuration
CLOUD_BUILDER="cloud-mahzyarm-bee"
IMAGE_NAME="beemed"
REGISTRY="docker.io"  # Change to your registry
NAMESPACE="mahzyarm"  # Change to your Docker Hub namespace

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Functions
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if Docker is installed
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    print_info "Docker is installed"
}

# Check if buildx is available
check_buildx() {
    if ! docker buildx version &> /dev/null; then
        print_error "Docker Buildx is not available. Please update Docker."
        exit 1
    fi
    print_info "Docker Buildx is available"
}

# Create or use cloud builder
setup_builder() {
    print_info "Setting up Docker Build Cloud builder: ${CLOUD_BUILDER}"
    
    # Check if builder exists
    if docker buildx ls | grep -q "${CLOUD_BUILDER}"; then
        print_info "Builder ${CLOUD_BUILDER} already exists"
    else
        print_info "Creating cloud builder ${CLOUD_BUILDER}"
        docker buildx create --driver cloud ${NAMESPACE}/${CLOUD_BUILDER##cloud-*-} || {
            print_error "Failed to create cloud builder. Make sure you have access to Docker Build Cloud."
            exit 1
        }
    fi
    
    # Set as current builder
    docker buildx use ${CLOUD_BUILDER}
    print_info "Using builder: ${CLOUD_BUILDER}"
}

# Build image
build_image() {
    local tag=$1
    local platforms=$2
    local push=$3
    
    print_info "Building image: ${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:${tag}"
    print_info "Platforms: ${platforms}"
    print_info "Push: ${push}"
    
    local build_args=(
        "--builder" "${CLOUD_BUILDER}"
        "--platform" "${platforms}"
        "--tag" "${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:${tag}"
        "-f" "Dockerfile.buildx"
        "--cache-from" "type=registry,ref=${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:buildcache"
        "--cache-to" "type=registry,ref=${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:buildcache,mode=max"
    )
    
    if [ "${push}" == "true" ]; then
        build_args+=("--push")
    else
        build_args+=("--load")
    fi
    
    # Add build arguments
    build_args+=(
        "--build-arg" "NODE_ENV=production"
        "."
    )
    
    print_info "Running build command..."
    docker buildx build "${build_args[@]}"
}

# Main execution
main() {
    print_info "BeeMed Docker Build Cloud Builder"
    print_info "================================"
    
    # Parse arguments
    TAG="${1:-latest}"
    PLATFORMS="${2:-linux/amd64,linux/arm64}"
    PUSH="${3:-false}"
    
    # Checks
    check_docker
    check_buildx
    
    # Setup builder
    setup_builder
    
    # Inspect builder
    print_info "Inspecting builder..."
    docker buildx inspect ${CLOUD_BUILDER}
    
    # Build image
    build_image "${TAG}" "${PLATFORMS}" "${PUSH}"
    
    print_info "Build completed successfully!"
    
    if [ "${PUSH}" == "true" ]; then
        print_info "Image pushed to: ${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:${TAG}"
    else
        print_info "Image loaded locally as: ${REGISTRY}/${NAMESPACE}/${IMAGE_NAME}:${TAG}"
    fi
}

# Show usage
usage() {
    echo "Usage: $0 [TAG] [PLATFORMS] [PUSH]"
    echo ""
    echo "Arguments:"
    echo "  TAG        - Docker image tag (default: latest)"
    echo "  PLATFORMS  - Target platforms (default: linux/amd64,linux/arm64)"
    echo "  PUSH       - Push to registry: true/false (default: false)"
    echo ""
    echo "Examples:"
    echo "  $0                    # Build for local use"
    echo "  $0 latest             # Build with 'latest' tag"
    echo "  $0 v1.0.0 linux/amd64 # Build for amd64 only"
    echo "  $0 latest linux/amd64,linux/arm64 true  # Build and push multi-arch"
}

# Check for help flag
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    usage
    exit 0
fi

# Run main function
main "$@"
</file>

<file path="CLAUDE.md">
# BeeMed - Medical Education Platform Project Specifications

## Project Overview
BeeMed is a gamified medical education platform designed to make learning medicine engaging and interactive through gamification elements like XP systems, achievements, and rewards.

## Technology Stack
- **Framework**: Next.js 15 with React 19 (App Router)
- **TypeScript**: Yes (strict mode)
- **UI Library**: HeroUI (instead of shadcn/ui)
- **Styling**: Tailwind CSS v4
- **Animation**: Framer Motion
- **State Management**: Zustand
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: NextAuth.js
- **Real-time**: Socket.io for live updates
- **Deployment**: Docker container

## Project Structure
```
src/
├── app/                    # Next.js 15 app directory
│   ├── (auth)/            # Auth routes (login, register)
│   ├── (dashboard)/       # Protected dashboard routes
│   ├── api/               # API routes
│   └── layout.tsx         # Root layout
├── components/            # React components (<250 lines each)
│   ├── gamification/      # XP bars, achievements, etc.
│   ├── ui/                # HeroUI-based components
│   └── features/          # Feature-specific components
├── hooks/                 # Custom React hooks
├── services/              # Business logic & API calls
├── lib/                   # Utilities and configurations
├── types/                 # TypeScript types/interfaces
└── constants/             # App-wide constants
```

## Core Features

### 1. Gamification System
- **XP System**: Students earn XP for completing lessons, quizzes, and activities
- **Levels**: Dynamic level calculation based on total XP
- **Achievements**: Unlockable badges with different rarity tiers
- **Loot System**: Reward boxes with cosmetic items and power-ups
- **Leaderboards**: Weekly/monthly rankings

### 2. Learning Modules
- **Medical Courses**: Anatomy, Physiology, Pathology, Pharmacology
- **Interactive Content**: Videos, 3D models, case studies
- **Quizzes**: Multiple choice, case-based questions
- **Progress Tracking**: Visual progress indicators

### 3. Social Features
- **Study Groups**: Collaborative learning spaces
- **Peer Reviews**: Students can review each other's work
- **Mentorship**: Connect with senior students/professionals
- **Forums**: Discussion boards for topics

## UI/UX Guidelines

### Color Scheme
```typescript
const colors = {
  // Medical theme colors
  primary: {
    50: '#E8F5FF',
    500: '#0078D4',  // Medical blue
    900: '#003D6B'
  },
  // Gamification colors
  xp: {
    bronze: '#CD7F32',
    silver: '#C0C0C0',
    gold: '#FFD700',
    diamond: '#B9F2FF'
  },
  rarity: {
    common: '#9CA3AF',
    uncommon: '#22C55E',
    rare: '#3B82F6',
    epic: '#A855F7',
    legendary: '#F59E0B'
  }
}
```

### Component Guidelines
- Use HeroUI components as base
- Keep components under 100 lines
- Implement loading states for all async operations
- Add smooth transitions using Framer Motion
- Ensure mobile responsiveness

## Database Schema

### Core Tables
- **users**: Profile, authentication, roles
- **user_progress**: XP, levels, achievements
- **courses**: Medical courses structure
- **lessons**: Individual lesson content
- **quizzes**: Questions and answers
- **achievements**: Achievement definitions
- **user_achievements**: Unlocked achievements
- **loot_items**: Cosmetic rewards

## API Structure
```
/api/
├── auth/          # Authentication endpoints
├── users/         # User management
├── courses/       # Course CRUD
├── progress/      # Progress tracking
├── gamification/  # XP, achievements, loot
└── social/        # Groups, forums
```

## Security Requirements
- JWT-based authentication
- Role-based access control (Student, Instructor, Admin)
- Input validation on all endpoints
- Rate limiting for API calls
- Sanitize user-generated content
- HTTPS only in production

## Performance Targets
- First Contentful Paint: < 1.5s
- Time to Interactive: < 3s
- API response time: < 200ms
- Real-time updates: < 100ms latency

## Development Workflow
1. Create feature branch from main
2. Implement with tests
3. Ensure components < 250 lines
4. Run linting and type checking
5. Create PR with description
6. Deploy to staging for testing

## Testing Strategy
- Unit tests for utilities and hooks
- Component testing with React Testing Library
- E2E tests for critical user flows
- API integration tests
- Performance testing

## Deployment
- Dockerized application with Docker Build Cloud support
- Multi-architecture builds (linux/amd64, linux/arm64)
- Cloud builder: `cloud-mahzyarm-bee`
- Environment-based configuration
- Health check endpoints
- Graceful shutdown handling
- Automated backups for database

### Docker Build Cloud Commands
```bash
# Build with cloud builder
docker buildx build --builder cloud-mahzyarm-bee .

# Using Make commands
make cloud-build    # Build locally
make cloud-push     # Build and push to registry
make cloud-inspect  # Inspect cloud builder
```

## Monitoring
- Error tracking with Sentry
- Performance monitoring
- User analytics (privacy-compliant)
- Real-time alerts for critical issues

## Accessibility
- WCAG 2.1 AA compliance
- Keyboard navigation support
- Screen reader compatibility
- High contrast mode
- Reduced motion support

## Code Standards
- ESLint + Prettier configuration
- Pre-commit hooks with Husky
- Conventional commits
- Documentation for public APIs
- TypeScript strict mode

## Environment Variables
```
DATABASE_URL=
NEXTAUTH_SECRET=
NEXTAUTH_URL=
SOCKET_URL=
REDIS_URL=
SENTRY_DSN=
```

## Getting Started
1. Clone repository
2. Install dependencies: `npm install`
3. Setup database: `npx prisma migrate dev`
4. Configure environment variables
5. Run development server: `npm run dev`

## Important Notes
- Always use HeroUI components (not shadcn/ui)
- Keep files under 250 lines
- Implement features incrementally
- Test each feature before moving to next
- Commit frequently with clear messages
</file>

<file path="docker-compose.dev.yml">
version: '3.8'

services:
  # Development version with hot reload
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: beemed-app-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://beemed:beemed_password@postgres:5432/beemed_db
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=dev_secret_key_change_in_production
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - postgres
      - redis
    networks:
      - beemed-network
    command: npm run dev

  postgres:
    extends:
      file: docker-compose.yml
      service: postgres

  redis:
    extends:
      file: docker-compose.yml
      service: redis

  adminer:
    extends:
      file: docker-compose.yml
      service: adminer
    profiles:
      - tools
</file>

<file path="docker-compose.yml">
version: '3.8'

services:
  # BeeMed Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: beemed-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://beemed:beemed_password@postgres:5432/beemed_db
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - beemed-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: beemed-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=beemed
      - POSTGRES_PASSWORD=beemed_password
      - POSTGRES_DB=beemed_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - beemed-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U beemed"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    container_name: beemed-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - beemed-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Adminer for database management (development only)
  adminer:
    image: adminer:latest
    container_name: beemed-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - beemed-network
    restart: unless-stopped
    profiles:
      - dev

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  beemed-network:
    driver: bridge
</file>

<file path="Dockerfile">
# Multi-stage build for BeeMed application

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./
RUN npm ci

# Stage 2: Builder
FROM node:20-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set production environment
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Build the application
RUN npm run build

# Stage 3: Runner
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy necessary files
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

CMD ["node", "server.js"]
</file>

<file path="Dockerfile.buildx">
# Multi-stage Dockerfile optimized for Docker Build Cloud
# Supports multi-architecture builds (linux/amd64, linux/arm64)

# Stage 1: Dependencies
FROM --platform=$BUILDPLATFORM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies with cache mount for faster builds
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production

# Stage 2: Dev Dependencies & Builder
FROM --platform=$BUILDPLATFORM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY package.json package-lock.json* ./

# Install all dependencies including devDependencies
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Copy source code
COPY . .

# Build the application
ENV NEXT_TELEMETRY_DISABLED 1
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Use cache mount for Next.js build cache
RUN --mount=type=cache,target=/app/.next/cache \
    npm run build

# Stage 3: Production Runner
FROM --platform=$TARGETPLATFORM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy necessary files from builder
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

CMD ["node", "server.js"]
</file>

<file path="Dockerfile.dev">
# Development Dockerfile for BeeMed

FROM node:20-alpine

RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies
RUN npm ci

# Expose port
EXPOSE 3000

# Set environment
ENV NODE_ENV development
ENV NEXT_TELEMETRY_DISABLED 1

# Start development server
CMD ["npm", "run", "dev"]
</file>

<file path="Initial.md">
<img src="https://r2cdn.perplexity.ai/pplx-full-logo-primary-dark%402x.png" class="logo" width="120"/>

# Create me prompts as markdowns that I can feed claude code to get it started with the project. Also recommend a library for the UI and animations. Claude code will be programming everything with Opus 4. Act as a systems architect and senior designer and give me all the prompts and resources as markdowns. Include an architecture.md for it to refer to as well. Be as specific as you can.

I'll create a comprehensive set of prompts and resources for your gamified educational platform project. Here are the markdown files with detailed specifications:

### 1. Project Setup Prompt

```markdown
# Project Setup and Initial Configuration

## Technology Stack Requirements
- Next.js 15 with React 19 (App Router)
- TypeScript
- Tailwind CSS v4 with custom gamification theme
- shadcn/ui component library
- Motion.dev (Framer Motion) for animations
- Zustand for state management

## Implementation Steps
1. Initialize project:
```

npx create-next-app@latest eduquest-platform --typescript --tailwind --eslint --app --src-dir --import-alias "@/*"

```

2. Install dependencies:
```

npm install motion lottie-react @radix-ui/react-icons lucide-react
npm install class-variance-authority clsx tailwind-merge
npm install zustand date-fns nanoid

```

3. Configure shadcn/ui:
```

npx shadcn@latest init

# Select: TypeScript, Default style, Slate base color, CSS variables

```

4. Add essential components:
```

npx shadcn@latest add button card input label
npx shadcn@latest add progress badge avatar
npx shadcn@latest add dialog dropdown-menu

```

5. Configure Tailwind for gamification (`tailwind.config.ts`):
```

theme: {
extend: {
colors: {
xp: {
bronze: '\#CD7F32',
silver: '\#C0C0C0',
gold: '\#FFD700',
diamond: '\#B9F2FF'
},
rarity: {
common: '\#9CA3AF',
uncommon: '\#22C55E',
rare: '\#3B82F6',
epic: '\#A855F7',
legendary: '\#F59E0B'
}
},
keyframes: {
"xp-pulse": {
"0%, 100%": { transform: "scale(1)", opacity: "1" },
"50%": { transform: "scale(1.05)", opacity: "0.8" },
},
"level-up": {
"0%": { transform: "scale(0.8) rotate(-10deg)", opacity: "0" },
"50%": { transform: "scale(1.2) rotate(5deg)", opacity: "1" },
"100%": { transform: "scale(1) rotate(0deg)", opacity: "1" },
}
},
animation: {
"xp-pulse": "xp-pulse 2s ease-in-out infinite",
"level-up": "level-up 0.6s ease-out",
}
}
}

```

6. Create gamification types (`src/types/gamification.ts`):
```

export interface UserXP {
userId: string;
totalXP: number;
currentLevel: number;
xpToNextLevel: number;
}

export interface Achievement {
id: string;
name: string;
description: string;
icon: string;
rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
xpReward: number;
}

export interface LootItem {
id: string;
name: string;
type: 'cosmetic' | 'functional' | 'consumable';
rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
icon: string;
}

```

7. Create XP utilities (`src/lib/xp-utils.ts`):
```

export const calculateLevel = (totalXP: number): number => {
return Math.floor(Math.sqrt(totalXP / 100)) + 1;
};

export const calculateXPToNextLevel = (totalXP: number): number => {
const currentLevel = calculateLevel(totalXP);
return Math.pow(currentLevel, 2) * 100 - totalXP;
};

```

8. Run development server:
```

npm run dev

```
```


### 2. UI Library Recommendations

```markdown
# UI and Animation Library Recommendations

## Core UI Library: shadcn/ui + Radix Primitives
**Why this combination:**
- Headless components for complete styling control
- Perfect integration with Tailwind CSS v4
- Accessibility built-in (WAI-ARIA compliant)
- Zero runtime overhead (copy-paste components)
- Active community support

**Installation:**
```

npx shadcn@latest add

```

## Animation Libraries
### Primary: Framer Motion (motion.dev)
```

npm install motion

```
**Best for:**
- XP counter animations
- Level-up transitions
- Interactive component transitions
- Gesture animations (drag, hover)

### Secondary: Lottie React
```

npm install lottie-react

```
**Best for:**
- Loot box opening sequences
- Achievement celebrations
- Complex reward animations

## Gamification Component Structure
```

/components
/gamification
├── XPBar.tsx
├── AchievementBadge.tsx
├── LootBox.tsx
├── Leaderboard.tsx
└── ProgressRing.tsx

```

## Animation Implementation Pattern
```

import { motion } from 'framer-motion';
import { cn } from "@/lib/utils";

export function XPBar({ currentXP, totalXP }: { currentXP: number, totalXP: number }) {
return (
<motion.div
className="relative h-4 w-full bg-gray-200 rounded-full"
initial={{ width: 0 }}
animate={{ width: `${(currentXP/totalXP)*100}%` }}
transition={{ duration: 1, ease: "easeOut" }}
>
<div className={cn(
"h-full rounded-full",
currentXP >= totalXP ? 'bg-gradient-to-r from-yellow-400 to-yellow-600' : 'bg-blue-500'
)} />
</motion.div>
)
}

```

## Accessibility Considerations
1. All animations respect `prefers-reduced-motion`
2. ARIA labels for all gamification elements
3. Focus management for interactive components
4. Color contrast compliance for text/background
```


### 3. Architecture Reference

```markdown
# Gamified Educational Platform Architecture

## System Overview
![Architecture Diagram](architecture-diagram.png)

## Core Modules
1. **User Management**
   - Roles: Student, Instructor, Admin
   - Profiles with XP tracking
   - Social connections

2. **Content Delivery**
   - Course/module/lesson hierarchy
   - Multimedia content support
   - Progress tracking

3. **Gamification Engine**
   - XP calculation service
   - Achievement system
   - Loot distribution system
   - Leaderboard service

4. **Learning Analytics**
   - Engagement tracking
   - Performance metrics
   - Predictive modeling

## Database Schema
```

erDiagram
users ||--o{ user_xp : has
users ||--o{ achievements : earns
users ||--o{ loot_items : owns
courses ||--o{ modules : contains
modules ||--o{ lessons : contains
lessons ||--o{ quizzes : has

    users {
        string id PK
        string email
        string name
        string role
    }
    user_xp {
        string userId FK
        int totalXP
        int currentLevel
    }
    achievements {
        string id PK
        string name
        string description
        string rarity
    }
    loot_items {
        string id PK
        string name
        string type
        string rarity
    }
    ```

## API Endpoints
### Gamification Endpoints
- `POST /api/xp/earn` - Award XP for completed activities
- `GET /api/achievements` - List available achievements
- `POST /api/loot/unlock` - Unlock loot items
- `GET /api/leaderboard` - Current leaderboard standings

### Learning Endpoints
- `GET /api/courses` - List available courses
- `POST /api/progress` - Update lesson progress
- `GET /api/recommendations` - Get personalized recommendations

## Real-time Events
```

// XP Award Event
socket.emit('xp-awarded', {
userId: 'user_123',
amount: 50,
source: 'quiz_completion',
timestamp: new Date()
});

// Achievement Unlocked Event
socket.emit('achievement-unlocked', {
userId: 'user_123',
achievementId: 'achv_medic_master',
timestamp: new Date()
});

```

## Security Requirements
1. JWT authentication for all API endpoints
2. Role-based access control (RBAC)
3. Server-side validation of all XP awards
4. Anti-cheat mechanisms for leaderboards
5. Rate limiting on gamification endpoints

## Performance Targets
| Feature | Target Latency |
|---------|----------------|
| XP Updates | < 100ms |
| Leaderboard | < 200ms |
| Content Loading | < 500ms |
| Loot Animation | < 50ms |
```


### 4. Component Implementation Prompt

```markdown
# Gamification Component Implementation

## XP Counter Component
**File:** `src/components/gamification/XPBar.tsx`

**Requirements:**
- Animated progress bar
- Level display with animation
- Responsive design
- XP tooltip on hover

**Implementation Guide:**
```

import { motion } from 'framer-motion';
import { calculateLevel, calculateXPToNextLevel } from '@/lib/xp-utils';

interface XPBarProps {
currentXP: number;
}

export default function XPBar({ currentXP }: XPBarProps) {
const currentLevel = calculateLevel(currentXP);
const xpToNextLevel = calculateXPToNextLevel(currentXP);
const progress = (currentXP / (currentXP + xpToNextLevel)) * 100;

return (
<div className="w-full space-y-2">
<div className="flex justify-between">
<span className="font-medium">Level {currentLevel}</span>
<span className="text-muted-foreground">
{currentXP} / {currentXP + xpToNextLevel} XP
</span>
</div>
<div className="relative h-4 w-full bg-gray-200 rounded-full overflow-hidden">
<motion.div
className="h-full bg-blue-500 rounded-full"
initial={{ width: 0 }}
animate={{ width: `${progress}%` }}
transition={{ duration: 1, ease: "easeOut" }}
/>
</div>
<div className="text-xs text-right text-muted-foreground">
{xpToNextLevel} XP to next level
</div>
</div>
);
}

```

## Achievement Badge Component
**File:** `src/components/gamification/AchievementBadge.tsx`

**Requirements:**
- Rarity-based styling (colors, borders)
- Hover animation
- Tooltip with achievement details
- Progress indicator for multi-stage achievements

**Implementation Guide:**
```

import { motion } from 'framer-motion';
import { cn } from "@/lib/utils";
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";

interface AchievementBadgeProps {
name: string;
description: string;
icon: string;
rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
progress?: number;
total?: number;
}

const rarityColors = {
common: 'bg-gray-100 border-gray-300',
uncommon: 'bg-green-100 border-green-300',
rare: 'bg-blue-100 border-blue-300',
epic: 'bg-purple-100 border-purple-300',
legendary: 'bg-yellow-100 border-yellow-300'
};

export default function AchievementBadge({
name,
description,
icon,
rarity,
progress,
total
}: AchievementBadgeProps) {
return (
<Tooltip>
<TooltipTrigger asChild>
<motion.div
className={cn(
"p-3 border-2 rounded-lg flex items-center space-x-3 cursor-pointer",
rarityColors[rarity]
)}
whileHover={{ scale: 1.05 }}
whileTap={{ scale: 0.95 }}
>
<div className="text-2xl">{icon}</div>
<div>
<div className="font-semibold">{name}</div>
{progress !== undefined \&\& total !== undefined \&\& (
<div className="text-xs text-muted-foreground">
{progress}/{total}
</div>
)}
</div>
</motion.div>
</TooltipTrigger>
<TooltipContent>
<p className="font-semibold">{name}</p>
<p className="text-muted-foreground">{description}</p>
<div className="mt-2 text-xs capitalize text-foreground">
Rarity: <span className={cn("font-semibold", `text-${rarity}`)}>{rarity}</span>
</div>
</TooltipContent>
</Tooltip>
);
}

```
```


### 5. Animation Implementation Prompt

```markdown
# Animation Implementation Guide

## Core Animation Principles
1. **Purposeful Motion**: All animations should enhance understanding
2. **Performance First**: Prioritize CSS transitions over JavaScript
3. **Progressive Enhancement**: Graceful degradation when animations disabled
4. **Gamification Personality**: Playful but not distracting

## Recommended Animation Patterns

### XP Award Sequence
```

import { motion, AnimatePresence } from 'framer-motion';

function XPAwardNotification({ amount }: { amount: number }) {
return (
<AnimatePresence>
<motion.div
initial={{ opacity: 0, y: 20 }}
animate={{ opacity: 1, y: 0 }}
exit={{ opacity: 0, y: -20 }}
className="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg"
>
<div className="flex items-center space-x-2">
<motion.span
key={amount}
initial={{ scale: 0.5 }}
animate={{ scale: 1 }}
className="font-bold"
>
+{amount} XP
</motion.span>
<motion.div
animate={{
rotate: [0, 10, -10, 10, 0],
scale: [1, 1.2, 1.1, 1.2, 1]
}}
transition={{ duration: 1 }}
>
🎯
</motion.div>
</div>
</motion.div>
</AnimatePresence>
);
}

```

### Loot Box Opening
```

import Lottie from 'lottie-react';
import lootAnimation from './loot-animation.json';

function LootBoxOpener({ onComplete }: { onComplete: (item: LootItem) => void }) {
return (
<div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50">
<Lottie
animationData={lootAnimation}
loop={false}
onComplete={onComplete}
style={{ width: 300, height: 300 }}
/>
</div>
);
}

```

### Level Up Sequence
```

import { motion, AnimatePresence } from 'framer-motion';

function LevelUpModal({ newLevel }: { newLevel: number }) {
return (
<AnimatePresence>
<motion.div
initial={{ opacity: 0, scale: 0.8 }}
animate={{ opacity: 1, scale: 1 }}
exit={{ opacity: 0, scale: 0.8 }}
className="fixed inset-0 bg-black/70 flex items-center justify-center z-50"
>
<motion.div
initial={{ rotate: -10, scale: 0.5 }}
animate={{
rotate: 0,
scale: 1,
transition: {
type: "spring",
stiffness: 300,
damping: 15
}
}}
className="bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-2xl p-8 text-center max-w-md"
>
<motion.div
animate={{
scale: [1, 1.1, 1],
transition: {
repeat: Infinity,
duration: 2
}
}}
className="text-6xl mb-4"
>
🎉
</motion.div>
<h2 className="text-3xl font-bold text-white mb-2">Level Up!</h2>
<p className="text-xl text-white">You've reached Level {newLevel}</p>
</motion.div>
</motion.div>
</AnimatePresence>
);
}

```

## Animation Performance Optimization
1. Use `will-change: transform` for animated elements
2. Prefer `transform` and `opacity` over layout-triggering properties
3. Use `useMemo` for complex animations
4. Implement intersection observers for offscreen animations
5. Use CSS hardware acceleration with `translateZ(0)`
```

These prompts provide Claude with everything needed to start building your gamified educational platform. The architecture document serves as the central reference, while the component and animation guides ensure consistent implementation of gamification features.

<div style="text-align: center">⁂</div>

[^1]: https://www.robinwieruch.de/react-libraries/

[^2]: https://www.supernova.io/blog/top-10-pre-built-react-frontend-ui-libraries-for-2025

[^3]: https://www.youtube.com/watch?v=4ettB5JqDps

[^4]: https://daily.dev/blog/10-best-ui-animation-libraries-for-beginners-2024

[^5]: https://nazmidincer.com/blog/the-main-components-of-a-successful-e-learning-platform/

[^6]: https://www.browserstack.com/guide/react-components-libraries

[^7]: https://dev.to/bybydev/top-10-javascript-animation-libraries-1km7

[^8]: https://www.justinmind.com/ui-design/how-to-design-e-learning-platform

[^9]: https://gamificationnation.com/fr/blog/gamification-trends-for-2025/

[^10]: https://themeselection.com/gamification-component-example/

[^11]: https://www.reddit.com/r/react/comments/1j4jrlp/gamified_a_collection_of_react_hooks_and/

[^12]: https://polcode.com/resources/blog/how-to-plan-software-architecture-for-e-learning-platforms/

[^13]: https://github.com/react-native-training/create-xp-app

[^14]: https://www.plotline.so/blog/tools-to-gamify-apps

[^15]: https://arxiv.org/pdf/2101.02373.pdf

[^16]: https://dev.to/jetthoughts/cross-platform-development-using-reactxp-3poc

[^17]: https://nextjs.org/blog/next-15

[^18]: https://www.reddit.com/r/nextjs/comments/1jt9i3m/master_the_2025_stack_complete_guide_to_nextjs_15/

[^19]: https://nextjs.org/blog/next-15-1

[^20]: https://dev.to/aqsagull99/exploring-nextjs-15-the-future-of-react-19-applications-6kg

[^21]: https://www.walturn.com/insights/mastering-prompt-engineering-for-claude

[^22]: https://www.reddit.com/r/react/comments/1h8yb5b/has_anybody_used_shadcn_with_animation_library/

[^23]: https://nextjs.org/docs/app/guides/upgrading/version-15

[^24]: https://dev.to/shawon/claude-prompting-guide-general-tips-for-effective-prompting-5hi5

[^25]: https://www.reddit.com/r/reactjs/comments/1k1gerj/in_2025_whats_the_goto_reactjs_ui_library/

[^26]: https://www.aubergine.co/insights/top-ui-libraries-to-use-in-2025

[^27]: https://dev.to/holasoymalva/why-i-decided-to-stop-working-with-reactjs-in-2025-4d1l

[^28]: https://studiokrew.com/blog/app-gamification-strategies-2025/

[^29]: https://nextjs.org/blog

[^30]: https://github.com/shadcn-ui/ui/discussions/622

[^31]: https://ppl-ai-code-interpreter-files.s3.amazonaws.com/web/direct-files/a415a87c6572b87b30b057b8d06e9c9c/55394f23-eed3-469f-b7f5-848286793a0f/7db1e39d.md

[^32]: https://ppl-ai-code-interpreter-files.s3.amazonaws.com/web/direct-files/a415a87c6572b87b30b057b8d06e9c9c/72b0cd8a-cea8-49c5-80de-15836cf37ee7/e3f66cc6.md

[^33]: https://ppl-ai-code-interpreter-files.s3.amazonaws.com/web/direct-files/a415a87c6572b87b30b057b8d06e9c9c/352071f3-7b46-4b55-877e-62bc0c6787a7/4e03c430.md
</file>

<file path="Makefile">
.PHONY: help build up down logs shell clean dev prod cloud-build cloud-push cloud-inspect

# Configuration
CLOUD_BUILDER = cloud-mahzyarm-bee
IMAGE_NAME = beemed
REGISTRY = docker.io
NAMESPACE = mahzyarm
TAG ?= latest

# Default target
help:
	@echo "BeeMed Docker Commands:"
	@echo "  make dev         - Start development environment"
	@echo "  make prod        - Start production environment"
	@echo "  make build       - Build Docker images locally"
	@echo "  make up          - Start all services"
	@echo "  make down        - Stop all services"
	@echo "  make logs        - View container logs"
	@echo "  make shell       - Access app container shell"
	@echo "  make clean       - Remove volumes and containers"
	@echo "  make db-init     - Initialize database with migrations"
	@echo ""
	@echo "Docker Build Cloud Commands:"
	@echo "  make cloud-build - Build using Docker Build Cloud"
	@echo "  make cloud-push  - Build and push to registry"
	@echo "  make cloud-inspect - Inspect cloud builder"

# Development environment
dev:
	docker-compose -f docker-compose.dev.yml up -d
	@echo "Development environment started at http://localhost:3000"

# Production environment
prod:
	docker-compose up -d
	@echo "Production environment started at http://localhost:3000"

# Build images
build:
	docker-compose build

# Start services
up:
	docker-compose up -d

# Stop services
down:
	docker-compose down

# View logs
logs:
	docker-compose logs -f

# Access shell
shell:
	docker-compose exec app sh

# Clean everything
clean:
	docker-compose down -v
	docker system prune -f

# Initialize database
db-init:
	docker-compose exec app npx prisma migrate dev
	docker-compose exec app npx prisma db seed

# Docker Build Cloud commands
cloud-build:
	@echo "Building with Docker Build Cloud..."
	docker buildx build --builder $(CLOUD_BUILDER) \
		--platform linux/amd64,linux/arm64 \
		--tag $(REGISTRY)/$(NAMESPACE)/$(IMAGE_NAME):$(TAG) \
		-f Dockerfile.buildx \
		--cache-from type=registry,ref=$(REGISTRY)/$(NAMESPACE)/$(IMAGE_NAME):buildcache \
		--cache-to type=registry,ref=$(REGISTRY)/$(NAMESPACE)/$(IMAGE_NAME):buildcache,mode=max \
		--load \
		.

cloud-push:
	@echo "Building and pushing with Docker Build Cloud..."
	docker buildx build --builder $(CLOUD_BUILDER) \
		--platform linux/amd64,linux/arm64 \
		--tag $(REGISTRY)/$(NAMESPACE)/$(IMAGE_NAME):$(TAG) \
		-f Dockerfile.buildx \
		--cache-from type=registry,ref=$(REGISTRY)/$(NAMESPACE)/$(IMAGE_NAME):buildcache \
		--cache-to type=registry,ref=$(REGISTRY)/$(NAMESPACE)/$(IMAGE_NAME):buildcache,mode=max \
		--push \
		.

cloud-inspect:
	@echo "Inspecting Docker Build Cloud builder..."
	docker buildx inspect $(CLOUD_BUILDER)

# Setup cloud builder
cloud-setup:
	@echo "Setting up Docker Build Cloud builder..."
	docker buildx create --driver cloud mahzyarm/bee || true
	docker buildx use $(CLOUD_BUILDER)
</file>

<file path="README.BeeMed.md">
# BeeMed - Medical Education Platform

A gamified medical education platform built with Next.js 15, TypeScript, and HeroUI.

## Quick Start

### Local Development
```bash
# Install dependencies
npm install

# Run development server
npm run dev

# Open http://localhost:3000
```

### Docker Development
```bash
# Using Make
make dev

# Or using docker-compose
docker-compose -f docker-compose.dev.yml up -d
```

### Docker Production
```bash
# Build and run
make build
make prod

# Or using docker-compose
docker-compose build
docker-compose up -d
```

## Features Implemented

### ✅ Core Setup
- Next.js 15 with TypeScript
- HeroUI component library integration
- Tailwind CSS with medical theme colors
- Docker containerization (dev & prod)

### ✅ Gamification System
- **XP Bar Component**: Visual progress tracking with animations
- **XP Notifications**: Real-time XP gain notifications
- **Level Up Modal**: Celebratory level progression
- **XP Utilities**: Level calculation, progress tracking, XP formatting

### 🚧 In Progress
- Achievement badges
- Loot box system
- Leaderboards
- Course structure

## Project Structure
```
src/
├── app/                    # Next.js app directory
│   ├── api/health/        # Health check endpoint
│   └── page.tsx           # Home page demo
├── components/
│   └── gamification/      # XP, achievements, rewards
├── lib/                   # Utilities
│   ├── xp-utils.ts       # XP calculations
│   ├── gamification-utils.ts
│   └── utils.ts
└── types/                 # TypeScript definitions
```

## Available Scripts
```bash
npm run dev       # Development server
npm run build     # Production build
npm run start     # Production server
npm run lint      # Run ESLint
npm run type-check # TypeScript check
```

## Environment Variables
Create `.env.local`:
```env
DATABASE_URL=postgresql://beemed:beemed_password@localhost:5432/beemed_db
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-key
REDIS_URL=redis://localhost:6379
```

## Testing Components

Visit http://localhost:3000 to see:
- XP Bar with level progress
- Interactive XP gain buttons
- XP notifications on actions
- Level up modal when leveling

## Next Steps
1. Complete achievement system
2. Implement course structure
3. Add authentication
4. Create quiz engine
5. Build social features
</file>

<file path="README.Docker.md">
# BeeMed Docker Setup Guide

## Prerequisites
- Docker Engine 20.10+
- Docker Compose 2.0+
- Make (optional, for using Makefile commands)

## Quick Start

### Development Environment
```bash
# Start development environment with hot reload
make dev

# Or without make:
docker-compose -f docker-compose.dev.yml up -d
```

### Production Environment
```bash
# Build and start production environment
make build
make prod

# Or without make:
docker-compose build
docker-compose up -d
```

## Available Services

### Application (Port 3000)
- Next.js 15 application with HeroUI
- Hot reload enabled in development
- Optimized production build

### PostgreSQL Database (Port 5432)
- Version: 16 Alpine
- Default credentials:
  - User: `beemed`
  - Password: `beemed_password`
  - Database: `beemed_db`

### Redis Cache (Port 6379)
- Version: 7 Alpine
- Used for caching and real-time features

### Adminer (Port 8080) - Development Only
- Database management UI
- Access at: http://localhost:8080

## Common Commands

### Using Make
```bash
make dev        # Start development environment
make prod       # Start production environment
make build      # Build Docker images
make up         # Start all services
make down       # Stop all services
make logs       # View container logs
make shell      # Access app container shell
make clean      # Remove volumes and containers
make db-init    # Initialize database with migrations
```

### Using Docker Compose Directly
```bash
# Development
docker-compose -f docker-compose.dev.yml up -d
docker-compose -f docker-compose.dev.yml logs -f
docker-compose -f docker-compose.dev.yml down

# Production
docker-compose up -d
docker-compose logs -f
docker-compose down

# Access container shell
docker-compose exec app sh

# Run database migrations
docker-compose exec app npx prisma migrate dev
```

## Environment Variables

Create a `.env` file in the project root:
```env
# Database
DATABASE_URL=postgresql://beemed:beemed_password@localhost:5432/beemed_db

# NextAuth
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your-secret-key-here

# Redis
REDIS_URL=redis://localhost:6379

# Optional
SENTRY_DSN=your-sentry-dsn
```

## Troubleshooting

### Port Conflicts
If ports are already in use:
```bash
# Change ports in docker-compose.yml
# Example: "3001:3000" for app service
```

### Database Connection Issues
```bash
# Check database status
docker-compose ps postgres
docker-compose logs postgres

# Restart database
docker-compose restart postgres
```

### Clean Start
```bash
# Remove all containers and volumes
make clean

# Or:
docker-compose down -v
docker system prune -f
```

## Production Deployment

### Building with Docker Build Cloud
```bash
# Using cloud builder for multi-architecture builds
docker buildx build --builder cloud-mahzyarm-bee \
  --platform linux/amd64,linux/arm64 \
  --tag docker.io/mahzyarm/beemed:latest \
  --push .

# Or using Make commands
make cloud-push TAG=v1.0.0
```

### Building Locally
```bash
# Build optimized image
docker build -t beemed:latest .

# Tag for registry
docker tag beemed:latest your-registry/beemed:latest

# Push to registry
docker push your-registry/beemed:latest
```

### Health Checks
The application includes health check endpoints:
- App: http://localhost:3000/api/health
- Database: Automatic PostgreSQL health check
- Redis: Automatic Redis health check

## Security Notes

1. **Change default passwords** in production
2. **Generate secure NEXTAUTH_SECRET**: 
   ```bash
   openssl rand -base64 32
   ```
3. **Use environment-specific .env files**
4. **Enable HTTPS** in production with a reverse proxy
5. **Restrict database access** to application network only

## Monitoring

### View Logs
```bash
# All services
docker-compose logs -f

# Specific service
docker-compose logs -f app
docker-compose logs -f postgres
```

### Resource Usage
```bash
docker stats
```

### Network Inspection
```bash
docker network ls
docker network inspect beemed-network
```
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss'
import { heroui } from '@heroui/react'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
    './node_modules/@heroui/theme/dist/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        // Medical theme colors
        medical: {
          50: '#E8F5FF',
          100: '#D1EBFF',
          200: '#A3D7FF',
          300: '#6BBFFF',
          400: '#2EA1FF',
          500: '#0078D4',
          600: '#005FA3',
          700: '#004578',
          800: '#003153',
          900: '#001B33',
        },
        // Gamification colors
        xp: {
          bronze: '#CD7F32',
          silver: '#C0C0C0',
          gold: '#FFD700',
          diamond: '#B9F2FF',
        },
        rarity: {
          common: '#9CA3AF',
          uncommon: '#22C55E',
          rare: '#3B82F6',
          epic: '#A855F7',
          legendary: '#F59E0B',
        },
      },
      keyframes: {
        'xp-pulse': {
          '0%, 100%': { transform: 'scale(1)', opacity: '1' },
          '50%': { transform: 'scale(1.05)', opacity: '0.8' },
        },
        'level-up': {
          '0%': { transform: 'scale(0.8) rotate(-10deg)', opacity: '0' },
          '50%': { transform: 'scale(1.2) rotate(5deg)', opacity: '1' },
          '100%': { transform: 'scale(1) rotate(0deg)', opacity: '1' },
        },
        'loot-shake': {
          '0%, 100%': { transform: 'translateX(0)' },
          '10%, 30%, 50%, 70%, 90%': { transform: 'translateX(-2px)' },
          '20%, 40%, 60%, 80%': { transform: 'translateX(2px)' },
        },
        'achievement-bounce': {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-20px)' },
        },
      },
      animation: {
        'xp-pulse': 'xp-pulse 2s ease-in-out infinite',
        'level-up': 'level-up 0.6s ease-out',
        'loot-shake': 'loot-shake 0.5s ease-in-out',
        'achievement-bounce': 'achievement-bounce 0.5s ease-in-out',
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-medical': 'linear-gradient(135deg, #0078D4 0%, #005FA3 100%)',
      },
    },
  },
  darkMode: 'class',
  plugins: [
    heroui({
      themes: {
        light: {
          colors: {
            primary: {
              DEFAULT: '#0078D4',
              foreground: '#FFFFFF',
            },
            focus: '#0078D4',
          },
        },
        dark: {
          colors: {
            primary: {
              DEFAULT: '#2EA1FF',
              foreground: '#FFFFFF',
            },
            focus: '#2EA1FF',
          },
        },
      },
    }),
  ],
}

export default config
</file>

<file path="test-cloud-build.sh">
#!/bin/bash

# Test script for Docker Build Cloud integration
# This script verifies the cloud builder setup without actually building

set -e

CLOUD_BUILDER="cloud-mahzyarm-bee"

echo "==================================="
echo "Docker Build Cloud Test Script"
echo "==================================="
echo ""

# Check Docker
if command -v docker &> /dev/null; then
    echo "✓ Docker is installed"
    docker --version
else
    echo "✗ Docker is not installed"
    echo "  Please install Docker Desktop 4.26.0 or later"
    exit 1
fi

echo ""

# Check Docker Buildx
if docker buildx version &> /dev/null; then
    echo "✓ Docker Buildx is available"
    docker buildx version
else
    echo "✗ Docker Buildx is not available"
    echo "  Please update Docker Desktop"
    exit 1
fi

echo ""

# Check if logged in to Docker
if docker info 2>/dev/null | grep -q "Username"; then
    echo "✓ Logged in to Docker Hub"
else
    echo "⚠ Not logged in to Docker Hub"
    echo "  Run: docker login"
fi

echo ""

# List builders
echo "Available builders:"
docker buildx ls || echo "  Failed to list builders"

echo ""

# Check cloud builder
echo "Checking for cloud builder: ${CLOUD_BUILDER}"
if docker buildx ls | grep -q "${CLOUD_BUILDER}"; then
    echo "✓ Cloud builder exists"
    echo ""
    echo "Builder details:"
    docker buildx inspect ${CLOUD_BUILDER} || echo "  Failed to inspect builder"
else
    echo "✗ Cloud builder not found"
    echo "  To create it, run:"
    echo "  docker buildx create --driver cloud mahzyarm/bee"
    echo "  docker buildx use ${CLOUD_BUILDER}"
fi

echo ""
echo "==================================="
echo "Test Summary"
echo "==================================="
echo ""
echo "To build with Docker Build Cloud, run:"
echo "  docker buildx build --builder ${CLOUD_BUILDER} ."
echo ""
echo "Or use the provided Make commands:"
echo "  make cloud-build    # Build locally"
echo "  make cloud-push     # Build and push"
echo ""
</file>

<file path="verify-cloud-setup.sh">
#!/bin/bash

# Docker Build Cloud Setup Verification Script
# This script checks if the cloud builder is properly configured

set -e

CLOUD_BUILDER="cloud-mahzyarm-bee"
TEST_REPO="https://github.com/dockersamples/buildme.git"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=====================================${NC}"
echo -e "${BLUE}Docker Build Cloud Setup Verification${NC}"
echo -e "${BLUE}=====================================${NC}"
echo ""

# Step 1: Check if Docker is installed
echo -e "${YELLOW}Step 1: Checking Docker installation...${NC}"
if command -v docker &> /dev/null; then
    echo -e "${GREEN}✓ Docker is installed${NC}"
    docker --version
else
    echo -e "${RED}✗ Docker is not installed${NC}"
    echo "Please install Docker Desktop first"
    exit 1
fi
echo ""

# Step 2: Check Docker Buildx
echo -e "${YELLOW}Step 2: Checking Docker Buildx...${NC}"
if docker buildx version &> /dev/null; then
    echo -e "${GREEN}✓ Docker Buildx is available${NC}"
    docker buildx version
else
    echo -e "${RED}✗ Docker Buildx is not available${NC}"
    exit 1
fi
echo ""

# Step 3: List current builders
echo -e "${YELLOW}Step 3: Current builders:${NC}"
docker buildx ls
echo ""

# Step 4: Check if cloud builder exists
echo -e "${YELLOW}Step 4: Checking for cloud builder '${CLOUD_BUILDER}'...${NC}"
if docker buildx ls | grep -q "${CLOUD_BUILDER}"; then
    echo -e "${GREEN}✓ Cloud builder '${CLOUD_BUILDER}' exists${NC}"
    
    # Check if it's the default
    if docker buildx ls | grep "${CLOUD_BUILDER}" | grep -q "*"; then
        echo -e "${GREEN}✓ Cloud builder is set as default${NC}"
    else
        echo -e "${YELLOW}⚠ Cloud builder exists but is not default${NC}"
        echo "Setting as default..."
        docker buildx use ${CLOUD_BUILDER} --global
        echo -e "${GREEN}✓ Cloud builder is now default${NC}"
    fi
else
    echo -e "${YELLOW}⚠ Cloud builder not found. Creating it...${NC}"
    
    # Create the cloud builder
    echo "Running: docker buildx create --driver cloud mahzyarm/bee"
    if docker buildx create --driver cloud mahzyarm/bee; then
        echo -e "${GREEN}✓ Cloud builder created successfully${NC}"
        
        # Set as default
        echo "Setting as default builder..."
        docker buildx use ${CLOUD_BUILDER} --global
        echo -e "${GREEN}✓ Cloud builder is now default${NC}"
    else
        echo -e "${RED}✗ Failed to create cloud builder${NC}"
        echo "Make sure you have access to Docker Build Cloud"
        exit 1
    fi
fi
echo ""

# Step 5: Inspect the cloud builder
echo -e "${YELLOW}Step 5: Inspecting cloud builder...${NC}"
docker buildx inspect ${CLOUD_BUILDER}
echo ""

# Step 6: Test build with sample repository
echo -e "${YELLOW}Step 6: Testing build with sample repository...${NC}"
echo "Building from: ${TEST_REPO}"
echo -e "${BLUE}This will test if the cloud builder is working correctly${NC}"
echo ""
read -p "Do you want to run a test build? (y/N) " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Running test build..."
    if docker buildx build ${TEST_REPO} --builder ${CLOUD_BUILDER}; then
        echo -e "${GREEN}✓ Test build completed successfully${NC}"
    else
        echo -e "${RED}✗ Test build failed${NC}"
        echo "Check your Docker Build Cloud access and quota"
    fi
else
    echo "Skipping test build"
fi
echo ""

# Step 7: Build BeeMed project
echo -e "${YELLOW}Step 7: Ready to build BeeMed project${NC}"
echo "To build the BeeMed project, run:"
echo -e "${BLUE}docker buildx build --builder ${CLOUD_BUILDER} .${NC}"
echo ""
echo "Or use the Make commands:"
echo -e "${BLUE}make cloud-build${NC} - Build locally"
echo -e "${BLUE}make cloud-push${NC} - Build and push to registry"
echo ""

# Summary
echo -e "${GREEN}=====================================${NC}"
echo -e "${GREEN}Setup Summary${NC}"
echo -e "${GREEN}=====================================${NC}"
echo ""

# Check final status
if docker buildx ls | grep "${CLOUD_BUILDER}" | grep -q "*"; then
    echo -e "${GREEN}✓ Docker Build Cloud is properly configured${NC}"
    echo -e "${GREEN}✓ Cloud builder '${CLOUD_BUILDER}' is active and default${NC}"
    echo ""
    echo "You can now use Docker Build Cloud for all your builds!"
    echo "The cloud builder will be used by default for all 'docker buildx build' commands."
else
    echo -e "${RED}✗ Setup incomplete${NC}"
    echo "Please check the errors above"
fi
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { HeroUIProvider } from "@heroui/react";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "BeeMed - Medical Education Platform",
  description: "Gamified medical learning platform with XP, achievements, and interactive content",
  keywords: "medical education, gamification, healthcare learning, medical students",
  authors: [{ name: "BeeMed Team" }],
  openGraph: {
    title: "BeeMed - Medical Education Platform",
    description: "Learn medicine through gamification",
    type: "website",
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${inter.className} antialiased`}>
        <HeroUIProvider>
          {children}
        </HeroUIProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/page.tsx">
import { createClient } from '@/lib/supabase/server'
import { redirect } from 'next/navigation'
import { Button, Card, CardBody } from '@heroui/react'
import Link from 'next/link'

export default async function Home() {
  const supabase = await createClient()
  const { data: { user } } = await supabase.auth.getUser()

  if (user) {
    redirect('/dashboard')
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
      <nav className="container mx-auto px-6 py-6">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold text-primary-600">🐝 BeeMed</h1>
          <div className="space-x-4">
            <Button variant="light" as={Link} href="/auth/login">
              Log In
            </Button>
            <Button color="primary" as={Link} href="/auth/register">
              Sign Up
            </Button>
          </div>
        </div>
      </nav>

      <main className="container mx-auto px-6 py-16">
        <div className="text-center mb-16">
          <h2 className="text-5xl font-bold text-gray-900 mb-6">
            Gamified Medical Education
          </h2>
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Transform your medical learning journey with engaging gamification, 
            earn XP, unlock achievements, and compete with peers worldwide.
          </p>
          <Button
            size="lg"
            color="primary"
            as={Link}
            href="/auth/register"
            className="font-semibold"
          >
            Start Learning for Free
          </Button>
        </div>

        <div className="grid md:grid-cols-3 gap-8 mt-20">
          <Card>
            <CardBody className="text-center p-8">
              <div className="text-4xl mb-4">🎮</div>
              <h3 className="text-xl font-semibold mb-2">Gamified Learning</h3>
              <p className="text-gray-600">
                Earn XP, level up, and unlock achievements as you master medical concepts
              </p>
            </CardBody>
          </Card>

          <Card>
            <CardBody className="text-center p-8">
              <div className="text-4xl mb-4">📚</div>
              <h3 className="text-xl font-semibold mb-2">Expert Content</h3>
              <p className="text-gray-600">
                Comprehensive courses covering anatomy, physiology, pathology, and more
              </p>
            </CardBody>
          </Card>

          <Card>
            <CardBody className="text-center p-8">
              <div className="text-4xl mb-4">🏆</div>
              <h3 className="text-xl font-semibold mb-2">Compete & Collaborate</h3>
              <p className="text-gray-600">
                Join study groups, climb leaderboards, and learn with peers globally
              </p>
            </CardBody>
          </Card>
        </div>

        <div className="mt-20 text-center">
          <h3 className="text-3xl font-bold mb-8">Features</h3>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-4xl mx-auto">
            {[
              { icon: '📈', title: 'Progress Tracking', desc: 'Visual XP bars and level progression' },
              { icon: '🎯', title: 'Interactive Quizzes', desc: 'Test knowledge with instant feedback' },
              { icon: '👥', title: 'Study Groups', desc: 'Learn together with classmates' },
              { icon: '🎁', title: 'Loot System', desc: 'Unlock cosmetic rewards and badges' },
              { icon: '📱', title: 'Mobile Ready', desc: 'Learn anywhere on any device' },
              { icon: '🔄', title: 'Real-time Updates', desc: 'Live notifications and progress sync' },
              { icon: '🧑‍🏫', title: 'Mentorship', desc: 'Connect with senior students' },
              { icon: '📊', title: 'Analytics', desc: 'Track your learning patterns' },
            ].map((feature, i) => (
              <div key={i} className="text-center">
                <div className="text-3xl mb-2">{feature.icon}</div>
                <h4 className="font-semibold mb-1">{feature.title}</h4>
                <p className="text-sm text-gray-600">{feature.desc}</p>
              </div>
            ))}
          </div>
        </div>
      </main>

      <footer className="mt-20 border-t">
        <div className="container mx-auto px-6 py-8">
          <div className="text-center text-gray-600">
            <p>© 2024 BeeMed. Gamified medical education for the next generation.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

/src/generated/prisma
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  output: 'standalone',
  images: {
    domains: ['localhost'],
  },
  experimental: {
    serverActions: {
      bodySizeLimit: '2mb',
    },
  },
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "beemed",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroui/react": "^2.7.10",
    "@prisma/client": "^6.10.1",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "^0.6.1",
    "@supabase/supabase-js": "^2.50.0",
    "clsx": "^2.1.1",
    "framer-motion": "^12.18.1",
    "next": "15.3.4",
    "prisma": "^6.10.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.1",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
